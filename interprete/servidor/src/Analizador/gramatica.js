/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,5],$V2=[1,7],$V3=[1,8],$V4=[1,18],$V5=[1,20],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,45],$Va=[1,46],$Vb=[1,39],$Vc=[1,40],$Vd=[1,41],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,38],$Vl=[1,33],$Vm=[1,32],$Vn=[1,37],$Vo=[2,5,8,13,14,24,26,37,38,39,40,41,43,50,53,58,60,62,65,67,68,69,70,71,72,73,76,78],$Vp=[1,52],$Vq=[1,72],$Vr=[1,86],$Vs=[1,69],$Vt=[1,89],$Vu=[1,68],$Vv=[1,67],$Vw=[1,70],$Vx=[1,71],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[1,85],$VK=[8,45,49,54],$VL=[10,35,42],$VM=[1,124],$VN=[1,122],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[1,118],$VS=[1,119],$VT=[1,120],$VU=[1,121],$VV=[1,123],$VW=[1,125],$VX=[1,126],$VY=[1,127],$VZ=[1,128],$V_=[1,129],$V$=[10,42,44,45,49,55,58,66,79,80,81,82,83,84,85,86,87,88,89,90,106],$V01=[1,152],$V11=[42,49,58],$V21=[1,159],$V31=[10,42,49,55,58,66,89,90],$V41=[1,205],$V51=[10,42,44,45,49,55,58,66,79,80,85,86,87,88,89,90,106],$V61=[10,42,44,45,49,55,58,66,79,80,81,82,85,86,87,88,89,90,106],$V71=[10,42,44,45,49,55,58,66,79,80,81,82,83,85,86,87,88,89,90,106],$V81=[10,42,44,45,49,55,58,66,85,86,87,88,89,90,106],$V91=[42,49],$Va1=[1,246],$Vb1=[1,247],$Vc1=[58,65,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"ID":8,"INCRE":9,"PYC":10,"DECRE":11,"asignaciones":12,"vectores":13,"listas":14,"sentenciaif":15,"sentenciaswitch":16,"sentenciawhile":17,"sentenciadowhile":18,"sentenciafor":19,"sentbreak":20,"sentcontinue":21,"sentreturn":22,"funciones":23,"metodos":24,"llamadas":25,"startwith":26,"writeline":27,"declalista":28,"lista_append":29,"set_lista":30,"decla_vector":31,"set_vector":32,"tipo":33,"lista_ids":34,"IGUAL":35,"exp":36,"INT":37,"DOUBLE":38,"STRING":39,"CHAR":40,"BOOLEAN":41,"COMA":42,"RDYNAMICLIST":43,"MENORQUE":44,"MAYORQUE":45,"RNEW":46,"RTOCHARARRAY":47,"PARA":48,"PARC":49,"RAPPEND":50,"get_lista":51,"RGETVALUE":52,"RSETVALUE":53,"CORA":54,"CORC":55,"LLAVEA":56,"lista_exp":57,"LLAVEC":58,"get_vector":59,"RIF":60,"RELSE":61,"RSWITCH":62,"casos":63,"caso":64,"RCASE":65,"RDOSPTS":66,"RDEFAULT":67,"RWHILE":68,"RBREAK":69,"RCONTINUE":70,"RRETURN":71,"WRITELINE":72,"RFOR":73,"declaracion_for":74,"contador_for":75,"RDO":76,"lista_params":77,"RVOID":78,"MAS":79,"MENOS":80,"MULTI":81,"DIV":82,"POT":83,"MOD":84,"MAYORIGUAL":85,"MENORIGUAL":86,"IGUALIGUAL":87,"DIFERENTE":88,"AND":89,"OR":90,"NOT":91,"DECIMAL":92,"ENTERO":93,"CADENA":94,"CARACTER":95,"TRUE":96,"FALSE":97,"DOBLECOMILLAS":98,"RTOLOWER":99,"RTOUPPER":100,"RLENGTH":101,"RTRUNCATE":102,"RROUND":103,"RTYPEOF":104,"RTOSTRING":105,"TERNARIO":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ID",9:"INCRE",10:"PYC",11:"DECRE",13:"vectores",14:"listas",24:"metodos",26:"startwith",35:"IGUAL",37:"INT",38:"DOUBLE",39:"STRING",40:"CHAR",41:"BOOLEAN",42:"COMA",43:"RDYNAMICLIST",44:"MENORQUE",45:"MAYORQUE",46:"RNEW",47:"RTOCHARARRAY",48:"PARA",49:"PARC",50:"RAPPEND",52:"RGETVALUE",53:"RSETVALUE",54:"CORA",55:"CORC",56:"LLAVEA",58:"LLAVEC",60:"RIF",61:"RELSE",62:"RSWITCH",65:"RCASE",66:"RDOSPTS",67:"RDEFAULT",68:"RWHILE",69:"RBREAK",70:"RCONTINUE",71:"RRETURN",72:"WRITELINE",73:"RFOR",76:"RDO",78:"RVOID",79:"MAS",80:"MENOS",81:"MULTI",82:"DIV",83:"POT",84:"MOD",85:"MAYORIGUAL",86:"MENORIGUAL",87:"IGUALIGUAL",88:"DIFERENTE",89:"AND",90:"OR",91:"NOT",92:"DECIMAL",93:"ENTERO",94:"CADENA",95:"CARACTER",96:"TRUE",97:"FALSE",98:"DOBLECOMILLAS",99:"RTOLOWER",100:"RTOUPPER",101:"RLENGTH",102:"RTRUNCATE",103:"RROUND",104:"RTYPEOF",105:"RTOSTRING",106:"TERNARIO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,3],[6,3],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[33,1],[33,1],[33,1],[33,1],[33,1],[34,3],[34,1],[12,3],[28,12],[28,11],[29,7],[51,6],[30,9],[31,11],[31,9],[59,4],[32,7],[15,7],[15,11],[15,9],[16,7],[63,2],[63,1],[64,4],[64,3],[17,7],[20,2],[21,2],[22,3],[22,2],[27,5],[19,11],[74,4],[74,3],[75,2],[75,2],[75,3],[18,9],[23,8],[23,7],[23,8],[23,7],[77,4],[77,2],[77,7],[77,5],[25,4],[25,3],[57,3],[57,1],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,2],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,4],[36,2],[36,2],[36,1],[36,4],[36,4],[36,4],[36,4],[36,4],[36,4],[36,4],[36,4],[36,1],[36,1],[36,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 52:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 37: case 53: case 80:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 21: case 22: case 23: case 24: case 25: case 26: case 27:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = new asignacion.default($$[$0-2],new aritmetica.default(new identificador.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),'+',new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line,_$[$0-2].first_column,false));
break;
case 6:
 this.$ = new asignacion.default($$[$0-2],new aritmetica.default(new identificador.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),'-',new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line,_$[$0-2].first_column,false));
break;
case 7: case 20: case 97:
 this.$ = $$[$0-1]; 
break;
case 28:
console.log("Error Sintactico: "+ yytext+" linea: "+this._$.first_line + " Columna: "+this._$.first_column);
                   this.$= new errores.default("sintactico","No se esperaba el caracter: "+yytext,this._$.first_line,this._$.first_column);
                    
break;
case 29:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1],(((_$[$0-3].first_line)-1)/2)+1,_$[$0-3].first_column); console.log("se leyo en la linea"); console.log((((_$[$0-3].first_line)-1)/2)+1);
break;
case 30:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], null,(((_$[$0-1].first_line)-1)/2)+1,_$[$0-1].first_column);
break;
case 31:
this.$ = new tipo.default("ENTERO"); 
break;
case 32:
this.$ = new tipo.default("DOBLE"); 
break;
case 33:
this.$ = new tipo.default("CADENA"); 
break;
case 34:
this.$ = new tipo.default("CARACTER"); 
break;
case 35:
this.$ = new tipo.default("BOOLEANO"); 
break;
case 36: case 79:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 38: case 64:
 this.$ = new asignacion.default($$[$0-2],$$[$0],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column);
break;
case 39:
 this.$= new declalista.default($$[$0-9],$$[$0-7],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 40:
 this.$= new declalista.default($$[$0-8],$$[$0-6],_$[$0-10].first_line,_$[$0-10].first_column,$$[$0-2]);
break;
case 41:
this.$ = new  apendlist.default($$[$0-4],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 42:
this.$= new  get_lista.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 43:
this.$ = new set_lista.default($$[$0-6],$$[$0-4],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 44:
this.$= new vector.default(1,$$[$0-10],$$[$0-9],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 45:
this.$= new vector.default(2,$$[$0-8],$$[$0-7],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 46:
this.$ = new access_vector.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 47:
this.$ = new set_vector.default($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 48:
 this.$ = new sentenciaIf.default($$[$0-4], $$[$0-1], [], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 49:
 this.$ = new sentenciaIf.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 50:
 this.$ = new sentenciaIf.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 51:
 this.$ = new sentswitch.default($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 54:
this.$ = new casos.default($$[$0-2],$$[$0],false,(((_$[$0-2].first_line)-1)/2)+1,_$[$0-2].first_column);
break;
case 55:
this.$ = new casos.default($$[$0-2],$$[$0],true,(((_$[$0-1].first_line)-1)/2)+1,_$[$0-1].first_column);
break;
case 56:
this.$ = new sentwhile.default($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 57:
this.$ = new detener.default();
break;
case 58:
 this.$ = new continuar.default();
break;
case 59:
this.$= new sreturn.default($$[$0-1]); 
break;
case 60:
this.$= new sreturn.default(null); 
break;
case 61:
 this.$ = new writeline.default($$[$0-2],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column);  console.log("AAAAAAAAAAA writeline en linea: "+((_$[$0-2].first_line)/2)+" y columna: "+_$[$0-2].first_column);
break;
case 62:
 this.$ = new sentfor.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 63:
 this.$ = new declaracion.default($$[$0-3], $$[$0-2], $$[$0],(((_$[$0-2].first_line)-1)/2)+1,_$[$0-2].first_column); 
break;
case 65: case 107:
this.$ = new asignacion.default($$[$0-1],new aritmetica.default(new identificador.default($$[$0-1],((_$[$0-1].first_line-1)/2)+1,_$[$0-1].first_column),'+',new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column,false));
break;
case 66: case 108:
this.$ = new asignacion.default($$[$0-1],new aritmetica.default(new identificador.default($$[$0-1],((_$[$0-1].first_line-1)/2)+1,_$[$0-1].first_column),'-',new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column,false));
break;
case 67:
this.$ = new asignacion.default($$[$0-2],$$[$0],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column);
break;
case 68:
this.$ = new sentwhile.default($$[$0-2],$$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 69:
 this.$ = new func.default(2, $$[$0-7], $$[$0-6],$$[$0-4],false, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 70:
 this.$ = new func.default(2, $$[$0-6], $$[$0-5],[],false, $$[$0-1],  _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 71:
this.$ = new func.default(3, $$[$0-7], $$[$0-6],$$[$0-4],true, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 72:
this.$ = new func.default(3, $$[$0-6], $$[$0-5],[],true, $$[$0-1],  _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 73:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 74:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 75:
 this.$ = $$[$0-6]; this.$.push(new simbolo.default(5, $$[$0-2], $$[$0], null)); 
break;
case 76:
 this.$ = new Array(); this.$.push(new simbolo.default(5, $$[$0-2], $$[$0], null)); 
break;
case 77:
this.$ = new llamads.default($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 78:
this.$ = new llamads.default($$[$0-2], [] ,_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 81:
 this.$ = new aritmetica.default($$[$0-2], '+',$$[$0],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column,false); console.log("expresion E+E en la linea: "+ _$[$0-2].first_line+" y lascolumn: "+_$[$0-2].last_column);
break;
case 82:
 this.$ = new aritmetica.default($$[$0-2], '-',$$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 83:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 84:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 85:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 86:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 87:
 this.$ = new relacional.default($$[$0-2], '>=',$$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 88:
 this.$ = new relacional.default($$[$0-2], '>',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 89:
 this.$ = new relacional.default($$[$0-2], '<=',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 90:
 this.$ = new relacional.default($$[$0-2], '<',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 91:
 this.$ = new relacional.default($$[$0-2], '==',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 92:
 this.$ = new relacional.default($$[$0-2], '!=',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 93:
 this.$ = new logica.default($$[$0-2], '&&',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 94:
 this.$ = new logica.default($$[$0-2], '||',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 95:
 this.$ = new logica.default($$[$0], '!',null, ((_$[$0-1].first_line-1)/2)+1,$$[$0-1].first_column,true); 
break;
case 96:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', null, ((_$[$0-1].first_line-1)/2)+1, _$[$0-1].first_column,true); 
break;
case 98:
 this.$ = new primitivo.default(Number($$[$0]), 'DOBLE', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 99:
 this.$ = new primitivo.default(Number($$[$0]), 'ENTERO', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 100:
 this.$ = new identificador.default($$[$0], ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 101:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CADENA', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 102:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CARACTER', _$[$0].first_line, _$[$0].first_column); 
break;
case 103:
 this.$ = new primitivo.default(true, 'BOOLEANO', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 104:
 this.$ = new primitivo.default(false, 'BOOLEANO', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 105:
 $$[$0] = ""; this.$ = new primitivo.default($$[$0], 'CADENA', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 106:
this.$ = new casteo.default($$[$0-2],$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 109:
this.$=$$[$0];
break;
case 110:
this.$ = new nativas.default("tolower",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 111:
this.$ = new nativas.default("toupper",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 112:
this.$ = new nativas.default("length",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 113:
this.$ = new nativas.default("truncate",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 114:
this.$ = new nativas.default("round",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 115:
this.$ = new nativas.default("typeof",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 116:
this.$ = new nativas.default("tostring",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 117:
this.$ = new nativas.default("tochararray",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 118:
 this.$= $$[$0]; 
break;
case 119:
 this.$=$$[$0];   
break;
case 120:
this.$= new ternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{1:[3]},{2:$V0,5:[1,47],6:48,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},o($Vo,[2,3]),o($Vo,[2,4]),{9:[1,49],11:[1,50],35:[1,51],48:$Vp,54:[1,53]},{10:[1,54]},o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,18]),o($Vo,[2,19]),{10:[1,55]},o($Vo,[2,21]),o($Vo,[2,22]),o($Vo,[2,23]),o($Vo,[2,24]),o($Vo,[2,25]),o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),{8:[1,57],34:56},{48:[1,58]},{48:[1,59]},{48:[1,60]},{56:[1,61]},{48:[1,62]},{10:[1,63]},{10:[1,64]},{8:$Vq,10:[1,66],25:78,36:65,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:[1,90]},{48:[1,91]},{44:[1,92]},{48:[1,93]},{48:[1,94]},o($VK,[2,31]),o($VK,[2,32]),o($VK,[2,33]),o($VK,[2,34]),o($VK,[2,35]),{1:[2,1]},o($Vo,[2,2]),{10:[1,95]},{10:[1,96]},{8:$Vq,25:78,36:97,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:100,47:$Vr,48:$Vs,49:[1,99],51:87,52:$Vt,57:98,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:101,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},o($Vo,[2,7]),o($Vo,[2,20]),{10:[1,103],35:[1,102],42:[1,104]},o($VL,[2,37],{48:[1,105],54:[1,106]}),{8:$Vq,25:78,36:107,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:108,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:109,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{2:$V0,4:110,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{8:[1,113],33:112,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,74:111},o($Vo,[2,57]),o($Vo,[2,58]),{10:[1,114],44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},o($Vo,[2,60]),{8:$Vq,25:78,36:130,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:131,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,33:133,36:132,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},o($V$,[2,98]),o($V$,[2,99]),o($V$,[2,100],{9:[1,134],11:[1,135],48:$Vp,54:[1,136]}),o($V$,[2,101]),o($V$,[2,102]),o($V$,[2,103]),o($V$,[2,104]),o($V$,[2,105]),o($V$,[2,109]),{48:[1,137]},{48:[1,138]},{48:[1,139]},{48:[1,140]},{48:[1,141]},{48:[1,142]},{48:[1,143]},{48:[1,144]},o($V$,[2,118]),o($V$,[2,119]),{48:[1,145]},{48:[1,146]},{8:$Vq,25:78,36:147,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{33:148,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va},{8:[1,149]},{8:[1,150]},o($Vo,[2,5]),o($Vo,[2,6]),{10:[2,38],44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{42:$V01,49:[1,151]},o($V$,[2,78]),o($V11,[2,80],{44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_}),{44:$VM,45:$VN,55:[1,153],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{8:$Vq,25:78,36:154,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},o($Vo,[2,30]),{8:[1,155]},{33:158,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$V21,49:[1,157],77:156},{55:[1,160]},{44:$VM,45:$VN,49:[1,161],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{44:$VM,45:$VN,49:[1,162],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{44:$VM,45:$VN,49:[1,163],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{2:$V0,6:48,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,58:[1,164],60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{10:[1,165]},{8:[1,166]},{35:[1,167]},o($Vo,[2,59]),{8:$Vq,25:78,36:168,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:169,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:170,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:171,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:172,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:173,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:174,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:175,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:176,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:177,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:178,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:179,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:180,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:181,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:182,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},o($V31,[2,95],{44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,106:$V_}),o($V$,[2,96]),{44:$VM,45:$VN,49:[1,183],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{49:[1,184]},o($V$,[2,107]),o($V$,[2,108]),{8:$Vq,25:78,36:185,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:186,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:187,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:188,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:189,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:190,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:191,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:192,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:193,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:[1,194]},{33:158,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$V21,49:[1,196],77:195},{44:$VM,45:$VN,49:[1,197],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{45:[1,198]},{42:[1,199]},{42:[1,200]},o($V$,[2,77]),{8:$Vq,25:78,36:201,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{35:[1,202]},{10:[1,203],44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},o($VL,[2,36]),{42:$V41,49:[1,204]},{56:[1,206]},{8:[1,207]},{44:[1,208]},{35:[1,209]},{56:[1,210]},{56:[1,211]},{56:[1,212]},{68:[1,213]},{8:$Vq,25:78,36:214,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{35:[1,215]},{8:$Vq,25:78,36:216,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},o($V51,[2,81],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($V51,[2,82],{81:$VQ,82:$VR,83:$VS,84:$VT}),o($V61,[2,83],{83:$VS,84:$VT}),o($V61,[2,84],{83:$VS,84:$VT}),o($V71,[2,85],{84:$VT}),o($V71,[2,86],{84:$VT}),o($V81,[2,87],{79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT}),o($V81,[2,88],{79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT}),o($V81,[2,89],{79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT}),o($V81,[2,90],{79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT}),o($V81,[2,91],{79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT}),o($V81,[2,92],{79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT}),o($V31,[2,93],{44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,106:$V_}),o([10,42,49,55,58,66,90],[2,94],{44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,106:$V_}),{44:$VM,45:$VN,66:[1,217],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},o($V$,[2,97]),{8:$Vq,25:78,36:218,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{44:$VM,45:$VN,55:[1,219],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{44:$VM,45:$VN,49:[1,220],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{44:$VM,45:$VN,49:[1,221],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{44:$VM,45:$VN,49:[1,222],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{44:$VM,45:$VN,49:[1,223],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{44:$VM,45:$VN,49:[1,224],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{44:$VM,45:$VN,49:[1,225],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{44:$VM,45:$VN,49:[1,226],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{44:$VM,45:$VN,49:[1,227],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{42:[1,228]},{42:$V41,49:[1,229]},{56:[1,230]},{10:[1,231]},{8:[1,232]},{8:$Vq,25:78,36:233,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:$Vq,25:78,36:234,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},o($V11,[2,79],{44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_}),{8:$Vq,25:78,36:235,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},o($Vo,[2,29]),{56:[1,236]},{33:237,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:[1,238]},{2:$V0,4:239,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},o($V91,[2,74]),{33:240,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va},{46:[1,241],56:[1,242]},{2:$V0,4:243,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{63:244,64:245,65:$Va1,67:$Vb1},{2:$V0,4:248,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{48:[1,249]},{10:[1,250],44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{8:$Vq,25:78,36:251,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{10:[2,64],44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{8:$Vq,25:78,36:252,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},o($V$,[2,106]),o($V$,[2,46]),o($V$,[2,110]),o($V$,[2,111]),o($V$,[2,112]),o($V$,[2,113]),o($V$,[2,114]),o($V$,[2,115]),o($V$,[2,116]),o($V$,[2,117]),{8:$Vq,25:78,36:253,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{56:[1,254]},{2:$V0,4:255,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},o($Vo,[2,61]),{35:[1,256]},{44:$VM,45:$VN,49:[1,257],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{42:[1,258],44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{10:[1,259],44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{2:$V0,4:260,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{8:[1,261]},{44:[1,262]},{2:$V0,6:48,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,58:[1,263],60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{45:[1,264]},{33:265,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va},{8:$Vq,25:78,36:100,47:$Vr,48:$Vs,51:87,52:$Vt,57:266,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{2:$V0,6:48,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,58:[1,267],60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{58:[1,268],64:269,65:$Va1,67:$Vb1},o($Vc1,[2,53]),{8:$Vq,25:78,36:270,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{66:[1,271]},{2:$V0,6:48,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,58:[1,272],60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{8:$Vq,25:78,36:273,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{8:[1,275],75:274},{10:[2,63],44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},o([10,42,49,55,58,66,89,90,106],[2,120],{44:$VM,45:$VN,79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX}),{44:$VM,45:$VN,49:[1,276],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{2:$V0,4:277,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{2:$V0,6:48,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,58:[1,278],60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{46:[1,279],47:[1,280]},{10:[1,281]},{8:$Vq,25:78,36:282,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},o($Vo,[2,47]),{2:$V0,6:48,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,58:[1,283],60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},o($V91,[2,73]),{33:284,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va},o($Vo,[2,70]),{8:[1,285]},{54:[1,286]},{42:$V01,58:[1,287]},o($Vo,[2,48],{61:[1,288]}),o($Vo,[2,51]),o($Vc1,[2,52]),{44:$VM,45:$VN,66:[1,289],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{2:$V0,4:290,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},o($Vo,[2,56]),{44:$VM,45:$VN,49:[1,291],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{49:[1,292]},{9:[1,293],11:[1,294],35:[1,295]},o($V$,[2,42]),{2:$V0,6:48,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,58:[1,296],60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},o($Vo,[2,72]),{43:[1,297]},{48:[1,298]},o($Vo,[2,41]),{44:$VM,45:$VN,49:[1,299],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},o($Vo,[2,69]),{45:[1,300]},o($V91,[2,76]),{8:$Vq,25:78,36:301,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{10:[1,302]},{15:304,56:[1,303],60:$Ve},{2:$V0,4:305,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},o($Vc1,[2,55],{7:4,12:6,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,25:19,27:21,28:22,29:23,30:24,31:25,32:26,33:28,6:48,2:$V0,8:$V1,13:$V2,14:$V3,24:$V4,26:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn}),{10:[1,306]},{56:[1,307]},{49:[2,65]},{49:[2,66]},{8:$Vq,25:78,36:308,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},o($Vo,[2,71]),{44:[1,309]},{8:$Vq,25:78,36:310,47:$Vr,48:$Vs,51:87,52:$Vt,59:88,80:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,96:$VA,97:$VB,98:$VC,99:$VD,100:$VE,101:$VF,102:$VG,103:$VH,104:$VI,105:$VJ},{10:[1,311]},{8:[1,312]},{44:$VM,45:$VN,55:[1,313],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},o($Vo,[2,45]),{2:$V0,4:314,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},o($Vo,[2,50]),o($Vc1,[2,54],{7:4,12:6,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,25:19,27:21,28:22,29:23,30:24,31:25,32:26,33:28,6:48,2:$V0,8:$V1,13:$V2,14:$V3,24:$V4,26:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn}),o($Vo,[2,68]),{2:$V0,4:315,6:3,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{44:$VM,45:$VN,49:[2,67],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},{33:316,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va},{44:$VM,45:$VN,49:[1,317],79:$VO,80:$VP,81:$VQ,82:$VR,83:$VS,84:$VT,85:$VU,86:$VV,87:$VW,88:$VX,89:$VY,90:$VZ,106:$V_},o($Vo,[2,43]),o($V91,[2,75]),{10:[1,318]},{2:$V0,6:48,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,58:[1,319],60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{2:$V0,6:48,7:4,8:$V1,12:6,13:$V2,14:$V3,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V4,25:19,26:$V5,27:21,28:22,29:23,30:24,31:25,32:26,33:28,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,53:$Vd,58:[1,320],60:$Ve,62:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl,76:$Vm,78:$Vn},{45:[1,321]},{10:[1,322]},o($Vo,[2,44]),o($Vo,[2,49]),o($Vo,[2,62]),{10:[1,323]},o($Vo,[2,40]),o($Vo,[2,39])],
defaultActions: {47:[2,1],293:[2,65],294:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    
    const aritmetica = require('../Interprete/Expresiones/Operaciones/Aritmetica');
    const primitivo = require('../Interprete/Expresiones/Primitivo');

    const writeline = require('../Interprete/Instrucciones/WriteLine')
    const declaracion = require('../Interprete/Instrucciones/Declaracion')
    const ast = require('../Interprete/Ast/Ast')
    const tipo = require('../Interprete/TablaSimbolos/Tipo')
    const identificador = require('../Interprete/Expresiones/Identificador')
    const logica = require('../Interprete/Expresiones/Operaciones/Logica')
    const relacional=require('../Interprete/Expresiones/Operaciones/Relacional')
    const sentenciaIf= require('../Interprete/Instrucciones/Sentenciaif')
    const sentswitch= require('../Interprete/Instrucciones/Sentenciaswitch/Sentenciaswitch')
    const casos=require('../Interprete/Instrucciones/Sentenciaswitch/Casos')
    const detener= require('../Interprete/Instrucciones/SentBreak')
    const sentwhile=require('../Interprete/Instrucciones/Sentenciawhile')
    const incre_decre= require('../Interprete/Expresiones/Operaciones/incre_decremento')
    const asignacion= require('../Interprete/Instrucciones/Asignacion')
    const sentfor = require('../Interprete/Instrucciones/Sentenciafor')
    const llamads=require('../Interprete/Instrucciones/Llamadas')
    const param= require('../Interprete/Instrucciones/parametro')
    const func= require('../Interprete/Instrucciones/funciones')
    const sreturn= require('../Interprete/Instrucciones/sent_transfer/Sent_return')
    const simbolo = require('../Interprete/TablaSimbolos/Simbolos')
    const continuar=require('../Interprete/Instrucciones/sent_transfer/Sentcontinue')
    const casteo=require('../Interprete/Expresiones/Casteo')
    const nativas=require('../Interprete/Expresiones/Nativas/Nativas')
    const ternario=require('../Interprete/Expresiones/Ternario')
    const vector= require('../Interprete/Instrucciones/Decla_Vector')
    const access_vector=require('../Interprete/Expresiones/Accesovector')
    const get_lista= require('../Interprete/Expresiones/Get_lis')
    const set_vector = require('../Interprete/Instrucciones/Set_vector')
    const declalista = require('../Interprete/Instrucciones/Decla_lista')
    const apendlist =  require('../Interprete/Instrucciones/Append_list')
    const set_lista = require('../Interprete/Instrucciones/Set_list')
    const errores = require('../Interprete/Ast/Errores')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignoramos los comentarios simples*/
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 9 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 11 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 5:console.log("Reconocio : " + yy_.yytext); return 98
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 48 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 49 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 54 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 55 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 10 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 35 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 42 
break;
case 15:console.log("Reconocio : " + yy_.yytext); return 66
break;
case 16:console.log("Reconocio : " + yy_.yytext); return 56
break;
case 17:console.log("Reconocio : " + yy_.yytext); return 58
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 45 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 44 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 89 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 32:console.log("Reconocio : " + yy_.yytext); return 106
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 96 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 97 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 37 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 38 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 39 
break;
case 38: console.log("Reconocio : " + yy_.yytext);  return 40 
break;
case 39: console.log("Reconocio : " + yy_.yytext);  return 41 
break;
case 40: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 41:console.log("Reconocio : " + yy_.yytext); return 46
break;
case 42:console.log("Reconocio : " + yy_.yytext); return 68
break;
case 43:console.log("Reconocio : " + yy_.yytext); return 60
break;
case 44:console.log("Reconocio : " + yy_.yytext); return 61
break;
case 45:console.log("Reconocio : " + yy_.yytext); return 'RSTART'
break;
case 46:console.log("Reconocio : " + yy_.yytext); return 'RWITH'
break;
case 47:console.log("Reconocio : " + yy_.yytext); return 62
break;
case 48:console.log("Reconocio : " + yy_.yytext); return 65
break;
case 49:console.log("Reconocio : " + yy_.yytext); return 67
break;
case 50:console.log("Reconocio : " + yy_.yytext); return 73
break;
case 51:console.log("Reconocio : " + yy_.yytext); return 76
break;
case 52:console.log("Reconocio : " + yy_.yytext); return 70
break;
case 53:console.log("Reconocio : " + yy_.yytext); return 52
break;
case 54:console.log("Reconocio : " + yy_.yytext); return 53
break;
case 55:console.log("Reconocio : " + yy_.yytext); return 71
break;
case 56:console.log("Reconocio : " + yy_.yytext); return 99
break;
case 57:console.log("Reconocio : " + yy_.yytext); return 100
break;
case 58:console.log("Reconocio : " + yy_.yytext); return 102
break;
case 59:console.log("Reconocio : " + yy_.yytext); return 103
break;
case 60:console.log("Reconocio : " + yy_.yytext); return 104
break;
case 61:console.log("Reconocio : " + yy_.yytext); return 105
break;
case 62:console.log("Reconocio : " + yy_.yytext); return 47
break;
case 63:console.log("Reconocio : " + yy_.yytext); return 'RFALSE'
break;
case 64:console.log("Reconocio : " + yy_.yytext); return 'RTRUE'
break;
case 65:console.log("Reconocio : " + yy_.yytext); return 69
break;
case 66:console.log("Reconocio : " + yy_.yytext); return 43
break;
case 67:console.log("Reconocio : " + yy_.yytext); return 50
break;
case 68:console.log("Reconocio : " + yy_.yytext); return 78
break;
case 69:console.log("Reconocio : " + yy_.yytext); return 101
break;
case 70: console.log("Reconocio : " + yy_.yytext);  return 92 
break;
case 71: console.log("Reconocio : " + yy_.yytext);  return 93 
break;
case 72: console.log("Reconocio : " + yy_.yytext);  return 8 
break;
case 73: console.log("Reconocio : " + yy_.yytext);  return 94 
break;
case 74: console.log("Reconocio : " + yy_.yytext);  return 95 
break;
case 75:/* Espacios se ignoran */
break;
case 76:return 5
break;
case 77:  console.log("Error Lexico: "+yy_.yytext +" linea: "+yy_.yylineno +" Columna: "+(yy_.yylloc.last_column));
                        new errores.default('Lexico','El Caracter'+yy_.yytext+' no forma parte del lenguaje',yy_.yylineno,yy_.yylloc.last_column);


                        
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:"")/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:writeline\b)/i,/^(?:new\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:return\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tocharArray\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:break\b)/i,/^(?:dynamiclist\b)/i,/^(?:append\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}