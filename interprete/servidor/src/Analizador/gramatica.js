/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,18],$V2=[1,20],$V3=[1,40],$V4=[1,41],$V5=[1,42],$V6=[1,43],$V7=[1,44],$V8=[1,45],$V9=[1,46],$Va=[1,47],$Vb=[1,48],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,35],$Vg=[1,36],$Vh=[1,37],$Vi=[1,39],$Vj=[1,34],$Vk=[1,33],$Vl=[1,38],$Vm=[5,8,24,26,32,33,34,35,36,46,51,55,58,59,60,62,65,67,68,69,70,71,72,73,76,78],$Vn=[1,54],$Vo=[1,74],$Vp=[1,71],$Vq=[1,70],$Vr=[1,69],$Vs=[1,72],$Vt=[1,73],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[8,41,53,57],$VA=[10,30,37],$VB=[1,107],$VC=[1,108],$VD=[1,109],$VE=[1,110],$VF=[1,111],$VG=[1,112],$VH=[1,113],$VI=[1,114],$VJ=[1,115],$VK=[1,116],$VL=[1,117],$VM=[1,118],$VN=[1,119],$VO=[1,120],$VP=[10,37,42,57,66,80,81,82,83,84,85,86,87,88,89,90,91,92,93],$VQ=[37,57],$VR=[10,37,42,57,66,92,93],$VS=[1,176],$VT=[10,37,42,57,66,80,81,86,87,88,89,90,91,92,93],$VU=[10,37,42,57,66,80,81,82,83,86,87,88,89,90,91,92,93],$VV=[10,37,42,57,66,80,81,82,83,84,86,87,88,89,90,91,92,93],$VW=[10,37,42,57,66,86,87,88,89,90,91,92,93],$VX=[1,204],$VY=[1,205],$VZ=[46,65,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"ID":8,"INCRE":9,"PYC":10,"DECRE":11,"asignaciones":12,"vectores":13,"listas":14,"sentenciaif":15,"sentenciaswitch":16,"sentenciawhile":17,"sentenciadowhile":18,"sentenciafor":19,"sentbreak":20,"sentcontinue":21,"sentreturn":22,"funciones":23,"metodos":24,"llamadas":25,"startwith":26,"writeline":27,"tipo":28,"lista_ids":29,"IGUAL":30,"exp":31,"INT":32,"DOUBLE":33,"STRING":34,"CHAR":35,"BOOLEAN":36,"COMA":37,"declavector":38,"accesvector":39,"modvector":40,"CORCHA":41,"CORCHC":42,"RNEW":43,"LLAVEA":44,"lista_valores":45,"LLAVEC":46,"declalista":47,"insertar_lista":48,"obtener_lista":49,"modlista":50,"RDYNAMICLIST":51,"MENQUE":52,"MAYQUE":53,"tochararray":54,"RAPPEND":55,"PARA":56,"PARC":57,"RGETVALUE":58,"RSETVALUE":59,"RIF":60,"RELSE":61,"RSWITCH":62,"casos":63,"caso":64,"RCASE":65,"RDOSPTS":66,"RDEFAULT":67,"RWHILE":68,"RBREAK":69,"RCONTINUE":70,"RRETURN":71,"WRITELINE":72,"RFOR":73,"declaracion_for":74,"contador_for":75,"RDO":76,"lista_params":77,"RVOID":78,"lista_exp":79,"MAS":80,"MENOS":81,"MULTI":82,"DIV":83,"POT":84,"MOD":85,"MAYORIGUAL":86,"MAYORQUE":87,"MENORIGUAL":88,"MENORQUE":89,"IGUALIGUAL":90,"DIFERENTE":91,"AND":92,"OR":93,"NOT":94,"DECIMAL":95,"ENTERO":96,"CADENA":97,"CARACTER":98,"TRUE":99,"FALSE":100,"DOBLECOMILLAS":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ID",9:"INCRE",10:"PYC",11:"DECRE",24:"metodos",26:"startwith",30:"IGUAL",32:"INT",33:"DOUBLE",34:"STRING",35:"CHAR",36:"BOOLEAN",37:"COMA",41:"CORCHA",42:"CORCHC",43:"RNEW",44:"LLAVEA",45:"lista_valores",46:"LLAVEC",51:"RDYNAMICLIST",52:"MENQUE",53:"MAYQUE",54:"tochararray",55:"RAPPEND",56:"PARA",57:"PARC",58:"RGETVALUE",59:"RSETVALUE",60:"RIF",61:"RELSE",62:"RSWITCH",65:"RCASE",66:"RDOSPTS",67:"RDEFAULT",68:"RWHILE",69:"RBREAK",70:"RCONTINUE",71:"RRETURN",72:"WRITELINE",73:"RFOR",76:"RDO",78:"RVOID",80:"MAS",81:"MENOS",82:"MULTI",83:"DIV",84:"POT",85:"MOD",86:"MAYORIGUAL",87:"MAYORQUE",88:"MENORIGUAL",89:"MENORQUE",90:"IGUALIGUAL",91:"DIFERENTE",92:"AND",93:"OR",94:"NOT",95:"DECIMAL",96:"ENTERO",97:"CADENA",98:"CARACTER",99:"TRUE",100:"FALSE",101:"DOBLECOMILLAS"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,3],[6,3],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[7,5],[7,3],[28,1],[28,1],[28,1],[28,1],[28,1],[29,3],[29,1],[12,3],[13,1],[13,1],[13,1],[38,11],[38,9],[39,4],[40,7],[14,1],[14,1],[14,1],[14,1],[47,12],[47,7],[48,7],[49,6],[50,9],[15,7],[15,11],[15,9],[16,7],[63,2],[63,1],[64,4],[64,3],[17,7],[20,2],[21,2],[22,3],[22,2],[27,5],[19,11],[74,4],[74,3],[75,2],[75,2],[75,3],[18,9],[23,8],[23,7],[23,8],[23,7],[77,4],[77,2],[25,4],[25,3],[79,3],[79,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,4],[31,2],[31,2],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 53:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 31: case 54: case 79:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 21: case 22:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = new asignacion.default($$[$0-2],new aritmetica.default(new identificador.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),'+',new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line,_$[$0-2].first_column,false));
break;
case 6:
 this.$ = new asignacion.default($$[$0-2],new aritmetica.default(new identificador.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),'-',new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line,_$[$0-2].first_column,false));
break;
case 7: case 20: case 96:
 this.$ = $$[$0-1]; 
break;
case 23:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1],(((_$[$0-3].first_line)-1)/2)+1,_$[$0-3].first_column); console.log("se leyo en la linea"); console.log((((_$[$0-3].first_line)-1)/2)+1);
break;
case 24:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], null,(((_$[$0-1].first_line)-1)/2)+1,_$[$0-1].first_column);
break;
case 25:
this.$ = new tipo.default("ENTERO"); 
break;
case 26:
this.$ = new tipo.default("DOBLE"); 
break;
case 27:
this.$ = new tipo.default("CADENA"); 
break;
case 28:
this.$ = new tipo.default("CARACTER"); 
break;
case 29:
this.$ = new tipo.default("BOOLEANO"); 
break;
case 30: case 78:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 32: case 65:
 this.$ = new asignacion.default($$[$0-2],$$[$0],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column);
break;
case 49:
 this.$ = new sentenciaIf.default($$[$0-4], $$[$0-1], [], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 50:
 this.$ = new sentenciaIf.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 51:
 this.$ = new sentenciaIf.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 52:
 this.$ = new sentswitch.default($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 55:
this.$ = new casos.default($$[$0-2],$$[$0],false,(((_$[$0-2].first_line)-1)/2)+1,_$[$0-2].first_column);
break;
case 56:
this.$ = new casos.default($$[$0-2],$$[$0],true,(((_$[$0-1].first_line)-1)/2)+1,_$[$0-1].first_column);
break;
case 57:
this.$ = new sentwhile.default($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 58:
this.$ = new detener.default();
break;
case 59:
 this.$ = new continuar.default();
break;
case 60:
this.$= new sreturn.default($$[$0-1]); 
break;
case 61:
this.$= new sreturn.default(null); 
break;
case 62:
 this.$ = new writeline.default($$[$0-2],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column);  console.log("AAAAAAAAAAA writeline en linea: "+((_$[$0-2].first_line)/2)+" y columna: "+_$[$0-2].first_column);
break;
case 63:
 this.$ = new sentfor.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 64:
 this.$ = new declaracion.default($$[$0-3], $$[$0-2], $$[$0],(((_$[$0-2].first_line)-1)/2)+1,_$[$0-2].first_column); 
break;
case 66: case 106:
this.$ = new asignacion.default($$[$0-1],new aritmetica.default(new identificador.default($$[$0-1],((_$[$0-1].first_line-1)/2)+1,_$[$0-1].first_column),'+',new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column,false));
break;
case 67: case 107:
this.$ = new asignacion.default($$[$0-1],new aritmetica.default(new identificador.default($$[$0-1],((_$[$0-1].first_line-1)/2)+1,_$[$0-1].first_column),'-',new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column,false));
break;
case 68:
this.$ = new asignacion.default($$[$0-2],$$[$0],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column);
break;
case 69:
this.$ = new sentwhile.default($$[$0-2],$$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 70:
 this.$ = new func.default(2, $$[$0-7], $$[$0-6],$$[$0-4],false, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 71:
 this.$ = new func.default(2, $$[$0-6], $$[$0-5],[],false, $$[$0-1],  _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 72:
this.$ = new func.default(3, $$[$0-7], $$[$0-6],$$[$0-4],true, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 73:
this.$ = new func.default(3, $$[$0-6], $$[$0-5],[],true, $$[$0-1],  _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 74:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 75:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 76:
this.$ = new llamads.default($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 77:
this.$ = new llamads.default($$[$0-2], [] ,_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 80:
 this.$ = new aritmetica.default($$[$0-2], '+',$$[$0],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column,false); console.log("expresion E+E en la linea: "+ _$[$0-2].first_line+" y lascolumn: "+_$[$0-2].last_column);
break;
case 81:
 this.$ = new aritmetica.default($$[$0-2], '-',$$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 82:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 83:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 84:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 85:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 86:
 this.$ = new relacional.default($$[$0-2], '>=',$$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 87:
 this.$ = new relacional.default($$[$0-2], '>',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 88:
 this.$ = new relacional.default($$[$0-2], '<=',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 89:
 this.$ = new relacional.default($$[$0-2], '<',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 90:
 this.$ = new relacional.default($$[$0-2], '==',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 91:
 this.$ = new relacional.default($$[$0-2], '!=',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 92:
 this.$ = new logica.default($$[$0-2], '&&',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 93:
 this.$ = new logica.default($$[$0-2], '||',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 94:
 this.$ = new logica.default($$[$0], '!',null, ((_$[$0-1].first_line-1)/2)+1,$$[$0-1].first_column,true); 
break;
case 95:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', null, ((_$[$0-1].first_line-1)/2)+1, _$[$0-1].first_column,true); 
break;
case 97:
 this.$ = new primitivo.default(Number($$[$0]), 'DOBLE', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 98:
 this.$ = new primitivo.default(Number($$[$0]), 'ENTERO', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 99:
 this.$ = new identificador.default($$[$0], ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 100:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CADENA', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 101:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CARACTER', _$[$0].first_line, _$[$0].first_column); 
break;
case 102:
 this.$ = new primitivo.default(true, 'BOOLEANO', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 103:
 this.$ = new primitivo.default(false, 'BOOLEANO', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 104:
 $$[$0] = ""; this.$ = new primitivo.default($$[$0], 'CADENA', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 105:
this.$ = new casteo.default($$[$0-2],$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 108:
this.$=$$[$0];
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{1:[3]},{5:[1,49],6:50,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),{9:[1,51],11:[1,52],30:[1,53],41:[1,55],56:$Vn},{10:[1,56]},o($Vm,[2,8]),o($Vm,[2,9]),o($Vm,[2,10]),o($Vm,[2,11]),o($Vm,[2,12]),o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,15]),o($Vm,[2,16]),o($Vm,[2,17]),o($Vm,[2,18]),o($Vm,[2,19]),{10:[1,57]},o($Vm,[2,21]),o($Vm,[2,22]),{8:[1,59],29:58},o($Vm,[2,33]),o($Vm,[2,34]),o($Vm,[2,35]),o($Vm,[2,40]),o($Vm,[2,41]),o($Vm,[2,42]),o($Vm,[2,43]),{56:[1,60]},{56:[1,61]},{56:[1,62]},{44:[1,63]},{56:[1,64]},{10:[1,65]},{10:[1,66]},{8:$Vo,10:[1,68],25:80,31:67,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:[1,81]},{56:[1,82]},o($Vz,[2,25]),o($Vz,[2,26]),o($Vz,[2,27]),o($Vz,[2,28]),o($Vz,[2,29]),{52:[1,83]},{56:[1,84]},{56:[1,85]},{56:[1,86]},{1:[2,1]},o($Vm,[2,2]),{10:[1,87]},{10:[1,88]},{8:$Vo,25:80,31:89,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:92,56:$Vp,57:[1,91],79:90,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:93,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},o($Vm,[2,7]),o($Vm,[2,20]),{10:[1,95],30:[1,94],37:[1,96]},o($VA,[2,31],{41:[1,98],56:[1,97]}),{8:$Vo,25:80,31:99,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:100,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:101,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{4:102,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{8:[1,105],28:104,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,74:103},o($Vm,[2,58]),o($Vm,[2,59]),{10:[1,106],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($Vm,[2,61]),{8:$Vo,25:80,31:121,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:122,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,28:124,31:123,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},o($VP,[2,97]),o($VP,[2,98]),o($VP,[2,99],{9:[1,125],11:[1,126],56:$Vn}),o($VP,[2,100]),o($VP,[2,101]),o($VP,[2,102]),o($VP,[2,103]),o($VP,[2,104]),o($VP,[2,108]),{56:[1,127]},{8:$Vo,25:80,31:128,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{28:129,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{8:[1,130]},{8:[1,131]},{8:[1,132]},o($Vm,[2,5]),o($Vm,[2,6]),{10:[2,32],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{37:[1,134],57:[1,133]},o($VP,[2,77]),o($VQ,[2,79],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),{42:[1,135],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{8:$Vo,25:80,31:136,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},o($Vm,[2,24]),{8:[1,137]},{28:140,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,57:[1,139],77:138},{42:[1,141]},{57:[1,142],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{57:[1,143],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{57:[1,144],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{6:50,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,46:[1,145],47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{10:[1,146]},{8:[1,147]},{30:[1,148]},o($Vm,[2,60]),{8:$Vo,25:80,31:149,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:150,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:151,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:152,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:153,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:154,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:155,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:156,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:157,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:158,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:159,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:160,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:161,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:162,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},o($VR,[2,94],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM}),o($VP,[2,95]),{57:[1,163],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{57:[1,164]},o($VP,[2,106]),o($VP,[2,107]),{28:140,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,57:[1,166],77:165},{57:[1,167],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{53:[1,168]},{37:[1,169]},{37:[1,170]},{37:[1,171]},o($VP,[2,76]),{8:$Vo,25:80,31:172,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},o($Vm,[2,38],{30:[1,173]}),{10:[1,174],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($VA,[2,30]),{37:$VS,57:[1,175]},{44:[1,177]},{8:[1,178]},{30:[1,179]},{44:[1,180]},{44:[1,181]},{44:[1,182]},{68:[1,183]},{8:$Vo,25:80,31:184,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{30:[1,185]},{8:$Vo,25:80,31:186,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},o($VT,[2,80],{82:$VD,83:$VE,84:$VF,85:$VG}),o($VT,[2,81],{82:$VD,83:$VE,84:$VF,85:$VG}),o($VU,[2,82],{84:$VF,85:$VG}),o($VU,[2,83],{84:$VF,85:$VG}),o($VV,[2,84],{85:$VG}),o($VV,[2,85],{85:$VG}),o($VW,[2,86],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($VW,[2,87],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($VW,[2,88],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($VW,[2,89],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($VW,[2,90],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($VW,[2,91],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG}),o($VR,[2,92],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM}),o([10,37,42,57,66,93],[2,93],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN}),o($VP,[2,96]),{8:$Vo,25:80,31:187,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{37:$VS,57:[1,188]},{44:[1,189]},{10:[1,190]},{8:[1,191]},{8:$Vo,25:80,31:192,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:193,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:$Vo,25:80,31:194,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},o($VQ,[2,78],{80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),{8:$Vo,25:80,31:195,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},o($Vm,[2,23]),{44:[1,196]},{28:197,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{4:198,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},o($VQ,[2,75]),{43:[1,199],44:[1,200]},{4:201,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{63:202,64:203,65:$VX,67:$VY},{4:206,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{56:[1,207]},{10:[1,208],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{8:$Vo,25:80,31:209,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{10:[2,65],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($VP,[2,105]),{44:[1,210]},{4:211,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},o($Vm,[2,62]),{30:[1,212]},{57:[1,213],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{57:[1,214],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{37:[1,215],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{10:[1,216],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{4:217,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{8:[1,218]},{6:50,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,46:[1,219],47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{28:220,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{45:[1,221]},{6:50,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,46:[1,222],47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{46:[1,223],64:224,65:$VX,67:$VY},o($VZ,[2,54]),{8:$Vo,25:80,31:225,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{66:[1,226]},{6:50,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,46:[1,227],47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{8:$Vo,25:80,31:228,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{8:[1,230],75:229},{10:[2,64],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{4:231,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{6:50,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,46:[1,232],47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{43:[1,233],54:[1,234]},{10:[1,235]},o($Vm,[2,47]),{8:$Vo,25:80,31:236,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},o($Vm,[2,39]),{6:50,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,46:[1,237],47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},o($VQ,[2,74]),o($Vm,[2,71]),{41:[1,238]},{46:[1,239]},o($Vm,[2,49],{61:[1,240]}),o($Vm,[2,52]),o($VZ,[2,53]),{66:[1,241],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{4:242,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},o($Vm,[2,57]),{57:[1,243],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{57:[1,244]},{9:[1,245],11:[1,246],30:[1,247]},{6:50,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,46:[1,248],47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},o($Vm,[2,73]),{51:[1,249]},o($Vm,[2,45]),o($Vm,[2,46]),{57:[1,250],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($Vm,[2,70]),{8:$Vo,25:80,31:251,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},{10:[1,252]},{15:254,44:[1,253],60:$Vc},{4:255,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},o($VZ,[2,56],{7:4,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,25:19,27:21,28:22,38:23,39:24,40:25,47:26,48:27,49:28,50:29,6:50,8:$V0,24:$V1,26:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl}),{10:[1,256]},{44:[1,257]},{57:[2,66]},{57:[2,67]},{8:$Vo,25:80,31:258,56:$Vp,81:$Vq,94:$Vr,95:$Vs,96:$Vt,97:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy},o($Vm,[2,72]),{52:[1,259]},{10:[1,260]},{42:[1,261],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($Vm,[2,37]),{4:262,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},o($Vm,[2,51]),o($VZ,[2,55],{7:4,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,25:19,27:21,28:22,38:23,39:24,40:25,47:26,48:27,49:28,50:29,6:50,8:$V0,24:$V1,26:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl}),o($Vm,[2,69]),{4:263,6:3,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{57:[2,68],80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{28:264,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},o($Vm,[2,48]),{10:[1,265]},{6:50,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,46:[1,266],47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{6:50,7:4,8:$V0,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V1,25:19,26:$V2,27:21,28:22,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:23,39:24,40:25,46:[1,267],47:26,48:27,49:28,50:29,51:$V8,55:$V9,58:$Va,59:$Vb,60:$Vc,62:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,73:$Vj,76:$Vk,78:$Vl},{53:[1,268]},o($Vm,[2,36]),o($Vm,[2,50]),o($Vm,[2,63]),{10:[1,269]},o($Vm,[2,44])],
defaultActions: {49:[2,1],245:[2,66],246:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    const aritmetica = require('../Interprete/Expresiones/Operaciones/Aritmetica');
    const primitivo = require('../Interprete/Expresiones/Primitivo');

    const writeline = require('../Interprete/Instrucciones/WriteLine')
    const declaracion = require('../Interprete/Instrucciones/Declaracion')
    const ast = require('../Interprete/Ast/Ast')
    const tipo = require('../Interprete/TablaSimbolos/Tipo')
    const identificador = require('../Interprete/Expresiones/Identificador')
    const logica = require('../Interprete/Expresiones/Operaciones/Logica')
    const relacional=require('../Interprete/Expresiones/Operaciones/Relacional')
    const sentenciaIf= require('../Interprete/Instrucciones/Sentenciaif')
    const sentswitch= require('../Interprete/Instrucciones/Sentenciaswitch/Sentenciaswitch')
    const casos=require('../Interprete/Instrucciones/Sentenciaswitch/Casos')
    const detener= require('../Interprete/Instrucciones/SentBreak')
    const sentwhile=require('../Interprete/Instrucciones/Sentenciawhile')
    const incre_decre= require('../Interprete/Expresiones/Operaciones/incre_decremento')
    const asignacion= require('../Interprete/Instrucciones/Asignacion')
    const sentfor = require('../Interprete/Instrucciones/Sentenciafor')
    const llamads=require('../Interprete/Instrucciones/Llamadas')
    const param= require('../Interprete/Instrucciones/parametro')
    const func= require('../Interprete/Instrucciones/funciones')
    const sreturn= require('../Interprete/Instrucciones/sent_transfer/Sent_return')
    const simbolo = require('../Interprete/TablaSimbolos/Simbolos')
    const continuar=require('../Interprete/Instrucciones/sent_transfer/Sentcontinue')
    const casteo=require('../Interprete/Expresiones/Casteo')


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignoramos los comentarios simples*/
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 9 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 11 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 5:console.log("Reconocio : " + yy_.yytext); return 101
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 56 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 57 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 'CORA' 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 'CORC' 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 10 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 30 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 37 
break;
case 15:console.log("Reconocio : " + yy_.yytext); return 66
break;
case 16:console.log("Reconocio : " + yy_.yytext); return 44
break;
case 17:console.log("Reconocio : " + yy_.yytext); return 46
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 89 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 92 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 93 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 94 
break;
case 32:console.log("Reconocio : " + yy_.yytext); return 'TERNARIO'
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 99 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 100 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 32 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 33 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 34 
break;
case 38: console.log("Reconocio : " + yy_.yytext);  return 35 
break;
case 39: console.log("Reconocio : " + yy_.yytext);  return 36 
break;
case 40: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 41:console.log("Reconocio : " + yy_.yytext); return 43
break;
case 42:console.log("Reconocio : " + yy_.yytext); return 68
break;
case 43:console.log("Reconocio : " + yy_.yytext); return 60
break;
case 44:console.log("Reconocio : " + yy_.yytext); return 61
break;
case 45:console.log("Reconocio : " + yy_.yytext); return 'RSTART'
break;
case 46:console.log("Reconocio : " + yy_.yytext); return 'RWITH'
break;
case 47:console.log("Reconocio : " + yy_.yytext); return 62
break;
case 48:console.log("Reconocio : " + yy_.yytext); return 65
break;
case 49:console.log("Reconocio : " + yy_.yytext); return 67
break;
case 50:console.log("Reconocio : " + yy_.yytext); return 73
break;
case 51:console.log("Reconocio : " + yy_.yytext); return 76
break;
case 52:console.log("Reconocio : " + yy_.yytext); return 70
break;
case 53:console.log("Reconocio : " + yy_.yytext); return 58
break;
case 54:console.log("Reconocio : " + yy_.yytext); return 59
break;
case 55:console.log("Reconocio : " + yy_.yytext); return 71
break;
case 56:console.log("Reconocio : " + yy_.yytext); return 'RTOLOWER'
break;
case 57:console.log("Reconocio : " + yy_.yytext); return 'RTOUPPER'
break;
case 58:console.log("Reconocio : " + yy_.yytext); return 'RTRUNCATE'
break;
case 59:console.log("Reconocio : " + yy_.yytext); return 'RROUND'
break;
case 60:console.log("Reconocio : " + yy_.yytext); return 'RTYPEOF'
break;
case 61:console.log("Reconocio : " + yy_.yytext); return 'RTOSTRING'
break;
case 62:console.log("Reconocio : " + yy_.yytext); return 'RTOCHARARRAY'
break;
case 63:console.log("Reconocio : " + yy_.yytext); return 'RFALSE'
break;
case 64:console.log("Reconocio : " + yy_.yytext); return 'RTRUE'
break;
case 65:console.log("Reconocio : " + yy_.yytext); return 69
break;
case 66:console.log("Reconocio : " + yy_.yytext); return 51
break;
case 67:console.log("Reconocio : " + yy_.yytext); return 55
break;
case 68:console.log("Reconocio : " + yy_.yytext); return 78
break;
case 69:console.log("Reconocio : " + yy_.yytext); return 'RLENGTH'
break;
case 70: console.log("Reconocio : " + yy_.yytext);  return 95 
break;
case 71: console.log("Reconocio : " + yy_.yytext);  return 96 
break;
case 72: console.log("Reconocio : " + yy_.yytext);  return 8 
break;
case 73: console.log("Reconocio : " + yy_.yytext);  return 97 
break;
case 74: console.log("Reconocio : " + yy_.yytext);  return 98 
break;
case 75:/* Espacios se ignoran */
break;
case 76:return 5
break;
case 77:return 'ERROR'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:"")/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:writeline\b)/i,/^(?:new\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:return\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tocharArray\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:break\b)/i,/^(?:dynamiclist\b)/i,/^(?:append\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}