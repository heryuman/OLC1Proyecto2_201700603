/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,11],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,33],$V9=[1,34],$Va=[1,35],$Vb=[1,36],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,40],$Vg=[1,41],$Vh=[1,42],$Vi=[1,28],$Vj=[1,29],$Vk=[1,30],$Vl=[1,31],$Vm=[1,32],$Vn=[5,13,14,16,17,18,19,20,21,28,29,30,31,32,34,45,50,54,57,58,59,61,64,66,67,68,69],$Vo=[34,40,52,56],$Vp=[25,27,33],$Vq=[1,67],$Vr=[1,64],$Vs=[1,63],$Vt=[1,62],$Vu=[1,65],$Vv=[1,66],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[1,98],$VP=[27,33,36,41,56,65,70,71,72,73,74,75,76,77,78,79,80,81,82,83],$VQ=[27,33,36,41,56,65,82,83],$VR=[27,33,36,41,56,65,70,71,76,77,78,79,80,81,82,83],$VS=[27,33,36,41,56,65,70,71,72,73,76,77,78,79,80,81,82,83],$VT=[27,33,36,41,56,65,70,71,72,73,74,76,77,78,79,80,81,82,83],$VU=[27,33,36,41,56,65,76,77,78,79,80,81,82,83],$VV=[1,145],$VW=[1,146],$VX=[45,64,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"vectores":8,"listas":9,"sentenciaif":10,"sentenciaswitch":11,"sentenciawhile":12,"sentenciadowhile":13,"sentenciafor":14,"sentbreak":15,"sentcontinue":16,"sentreturn":17,"funciones":18,"metodos":19,"llamadas":20,"startwith":21,"writeline":22,"tipo":23,"lista_ids":24,"IGUAL":25,"exp":26,"PYC":27,"INT":28,"DOUBLE":29,"STRING":30,"CHAR":31,"BOOLEAN":32,"COMA":33,"ID":34,"asignaciones":35,"PTYCOMA":36,"declavector":37,"accesvector":38,"modvector":39,"CORCHA":40,"CORCHC":41,"RNEW":42,"LLAVEA":43,"lista_valores":44,"LLAVEC":45,"declalista":46,"insertar_lista":47,"obtener_lista":48,"modlista":49,"RDYNAMICLIST":50,"MENQUE":51,"MAYQUE":52,"tochararray":53,"RAPPEND":54,"PARA":55,"PARC":56,"RGETVALUE":57,"RSETVALUE":58,"RIF":59,"RELSE":60,"RSWITCH":61,"casos":62,"caso":63,"RCASE":64,"RDOSPTS":65,"RDEFAULT":66,"RWHILE":67,"RBREAK":68,"WRITELINE":69,"MAS":70,"MENOS":71,"MULTI":72,"DIV":73,"POT":74,"MOD":75,"MAYORIGUAL":76,"MAYORQUE":77,"MENORIGUAL":78,"MENORQUE":79,"IGUALIGUAL":80,"DIFERENTE":81,"AND":82,"OR":83,"NOT":84,"DECIMAL":85,"ENTERO":86,"CADENA":87,"CARACTER":88,"TRUE":89,"FALSE":90,"DOBLECOMILLAS":91,"INCREMENTO":92,"DECREMENTO":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"sentenciadowhile",14:"sentenciafor",16:"sentcontinue",17:"sentreturn",18:"funciones",19:"metodos",20:"llamadas",21:"startwith",25:"IGUAL",27:"PYC",28:"INT",29:"DOUBLE",30:"STRING",31:"CHAR",32:"BOOLEAN",33:"COMA",34:"ID",36:"PTYCOMA",40:"CORCHA",41:"CORCHC",42:"RNEW",43:"LLAVEA",44:"lista_valores",45:"LLAVEC",50:"RDYNAMICLIST",51:"MENQUE",52:"MAYQUE",53:"tochararray",54:"RAPPEND",55:"PARA",56:"PARC",57:"RGETVALUE",58:"RSETVALUE",59:"RIF",60:"RELSE",61:"RSWITCH",64:"RCASE",65:"RDOSPTS",66:"RDEFAULT",67:"RWHILE",68:"RBREAK",69:"WRITELINE",70:"MAS",71:"MENOS",72:"MULTI",73:"DIV",74:"POT",75:"MOD",76:"MAYORIGUAL",77:"MAYORQUE",78:"MENORIGUAL",79:"MENORQUE",80:"IGUALIGUAL",81:"DIFERENTE",82:"AND",83:"OR",84:"NOT",85:"DECIMAL",86:"ENTERO",87:"CADENA",88:"CARACTER",89:"TRUE",90:"FALSE",91:"DOBLECOMILLAS",92:"INCREMENTO",93:"DECREMENTO"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[23,1],[23,1],[23,1],[23,1],[23,1],[24,3],[24,1],[35,4],[8,1],[8,1],[8,1],[37,11],[37,9],[38,4],[39,7],[9,1],[9,1],[9,1],[9,1],[46,12],[46,7],[47,7],[48,6],[49,9],[10,7],[10,11],[10,9],[11,7],[62,2],[62,1],[63,4],[63,3],[12,7],[15,2],[22,5],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,3],[26,2],[26,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 50:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 28: case 51:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4:
 this.$ =  $$[$0]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19:
 this.$ = $$[$0]; 
break;
case 20:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1],(((_$[$0-3].first_line)-1)/2)+1,_$[$0-3].first_column); console.log("se leyo en la linea"); console.log((((_$[$0-3].first_line)-1)/2)+1);
break;
case 21:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], null,(((_$[$0-1].first_line)-1)/2)+1,_$[$0-1].first_column);
break;
case 22:
this.$ = new tipo.default("ENTERO"); 
break;
case 23:
this.$ = new tipo.default("DOBLE"); 
break;
case 24:
this.$ = new tipo.default("CADENA"); 
break;
case 25:
this.$ = new tipo.default("CARACTER"); 
break;
case 26:
this.$ = new tipo.default("BOOLEANO"); 
break;
case 27:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 46:
 this.$ = new sentenciaIf.default($$[$0-4], $$[$0-1], [], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 47:
 this.$ = new sentenciaIf.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 48:
 this.$ = new sentenciaIf.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 49:
 this.$ = new sentswitch.default($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 52:
this.$ = new casos.default($$[$0-2],$$[$0],false,(((_$[$0-2].first_line)-1)/2)+1,_$[$0-2].first_column);
break;
case 53:
this.$ = new casos.default($$[$0-2],$$[$0],true,(((_$[$0-1].first_line)-1)/2)+1,_$[$0-1].first_column);
break;
case 54:
this.$ = new sentwhile.default($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 55:
this.$ = new detener.default();
break;
case 56:
 this.$ = new writeline.default($$[$0-2], $$[$0-4].first_line, $$[$0-4].last_line); 
break;
case 57:
 this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 58:
 this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 59:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 60:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 61:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 62:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 63:
 this.$ = new relacional.default($$[$0-2], '>=',$$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 64:
 this.$ = new relacional.default($$[$0-2], '>',$$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 65:
 this.$ = new relacional.default($$[$0-2], '<=',$$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 66:
 this.$ = new relacional.default($$[$0-2], '<',$$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 67:
 this.$ = new relacional.default($$[$0-2], '==',$$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 68:
 this.$ = new relacional.default($$[$0-2], '!=',$$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 69:
 this.$ = new logica.default($$[$0-2], '&&',$$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 70:
 this.$ = new logica.default($$[$0-2], '||',$$[$0], $$[$0-2].first_line, $$[$0-2].last_line,false); 
break;
case 71:
 this.$ = new logica.default($$[$0], '!',null, $$[$0-1].first_line,$$[$0-1].last_line,true); 
break;
case 72:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', null, $$[$0-1].first_line, $$[$0-1].last_line,true); 
break;
case 73:
 this.$ = $$[$0-1]; 
break;
case 74:
 this.$ = new primitivo.default(Number($$[$0]), 'DOBLE', $$[$0].first_line, $$[$0].last_line); 
break;
case 75:
 this.$ = new primitivo.default(Number($$[$0]), 'ENTERO', $$[$0].first_line, $$[$0].last_line); 
break;
case 76:
 this.$ = new identificador.default($$[$0], $$[$0].first_line, $$[$0].last_line); 
break;
case 77:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CADENA', $$[$0].first_line, $$[$0].last_line); 
break;
case 78:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CARACTER', $$[$0].first_line, $$[$0].last_line); 
break;
case 79:
 this.$ = new primitivo.default(true, 'BOOLEANO', $$[$0].first_line, $$[$0].last_line); 
break;
case 80:
 this.$ = new primitivo.default(false, 'BOOLEANO', $$[$0].first_line, $$[$0].last_line); 
break;
case 81:
 $$[$0] = ""; this.$ = new primitivo.default($$[$0], 'CADENA', $$[$0].first_line, $$[$0].last_line); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:19,23:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,37:21,38:22,39:23,46:24,47:25,48:26,49:27,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm},{1:[3]},{5:[1,43],6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:19,23:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,37:21,38:22,39:23,46:24,47:25,48:26,49:27,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),{24:45,34:[1,46]},o($Vn,[2,30]),o($Vn,[2,31]),o($Vn,[2,32]),o($Vn,[2,37]),o($Vn,[2,38]),o($Vn,[2,39]),o($Vn,[2,40]),{55:[1,47]},{55:[1,48]},{55:[1,49]},{27:[1,50]},{55:[1,51]},o($Vo,[2,22]),o($Vo,[2,23]),o($Vo,[2,24]),o($Vo,[2,25]),o($Vo,[2,26]),{40:[1,52]},{51:[1,53]},{55:[1,54]},{55:[1,55]},{55:[1,56]},{1:[2,1]},o($Vn,[2,2]),{25:[1,57],27:[1,58],33:[1,59]},o($Vp,[2,28],{40:[1,60]}),{26:61,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:73,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:74,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},o($Vn,[2,55]),{26:75,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:76,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{23:77,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc},{34:[1,78]},{34:[1,79]},{34:[1,80]},{26:81,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},o($Vn,[2,21]),{34:[1,82]},{41:[1,83]},{56:[1,84],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{26:99,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:100,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{23:102,26:101,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},o($VP,[2,74]),o($VP,[2,75]),o($VP,[2,76],{92:[1,103],93:[1,104]}),o($VP,[2,77]),o($VP,[2,78]),o($VP,[2,79]),o($VP,[2,80]),o($VP,[2,81]),{56:[1,105],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{56:[1,106],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{56:[1,107],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{41:[1,108],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{52:[1,109]},{33:[1,110]},{33:[1,111]},{33:[1,112]},{27:[1,113],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},o($Vp,[2,27]),{25:[1,114]},{43:[1,115]},{26:116,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:117,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:118,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:119,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:120,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:121,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:122,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:123,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:124,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:125,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:126,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:127,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:128,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:129,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},o($VQ,[2,71],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o($VP,[2,72]),{56:[1,130],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{56:[1,131]},o($VP,[2,83]),o($VP,[2,84]),{43:[1,132]},{43:[1,133]},{27:[1,134]},o($Vn,[2,35],{25:[1,135]}),{34:[1,136]},{26:137,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:138,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{26:139,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},o($Vn,[2,20]),{42:[1,140],43:[1,141]},{4:142,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:19,23:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,37:21,38:22,39:23,46:24,47:25,48:26,49:27,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm},o($VR,[2,57],{72:$VD,73:$VE,74:$VF,75:$VG}),o($VR,[2,58],{72:$VD,73:$VE,74:$VF,75:$VG}),o($VS,[2,59],{74:$VF,75:$VG}),o($VS,[2,60],{74:$VF,75:$VG}),o($VT,[2,61],{75:$VG}),o($VT,[2,62],{75:$VG}),o($VU,[2,63],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($VU,[2,64],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($VU,[2,65],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($VU,[2,66],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($VU,[2,67],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($VU,[2,68],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($VQ,[2,69],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM}),o([27,33,36,41,56,65,83],[2,70],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o($VP,[2,73]),o($VP,[2,82]),{62:143,63:144,64:$VV,66:$VW},{4:147,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:19,23:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,37:21,38:22,39:23,46:24,47:25,48:26,49:27,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm},o($Vn,[2,56]),{26:148,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{25:[1,149]},{56:[1,150],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{56:[1,151],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{33:[1,152],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{23:153,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc},{44:[1,154]},{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:19,23:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,37:21,38:22,39:23,45:[1,155],46:24,47:25,48:26,49:27,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm},{45:[1,156],63:157,64:$VV,66:$VW},o($VX,[2,51]),{26:158,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{65:[1,159]},{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:19,23:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,37:21,38:22,39:23,45:[1,160],46:24,47:25,48:26,49:27,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm},{36:[1,161],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{42:[1,162],53:[1,163]},{36:[1,164]},o($Vn,[2,44]),{26:165,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{40:[1,166]},{45:[1,167]},o($Vn,[2,46],{60:[1,168]}),o($Vn,[2,49]),o($VX,[2,50]),{65:[1,169],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{4:170,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:19,23:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,37:21,38:22,39:23,46:24,47:25,48:26,49:27,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm},o($Vn,[2,54]),o($Vn,[2,36]),{50:[1,171]},o($Vn,[2,42]),o($Vn,[2,43]),{56:[1,172],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},{26:173,34:$Vq,55:$Vr,71:$Vs,84:$Vt,85:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz,91:$VA},{36:[1,174]},{10:176,43:[1,175],59:$Vi},{4:177,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:19,23:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,37:21,38:22,39:23,46:24,47:25,48:26,49:27,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm},o($VX,[2,53],{7:4,8:5,9:6,10:7,11:8,12:9,15:12,22:19,23:20,37:21,38:22,39:23,46:24,47:25,48:26,49:27,6:44,13:$V0,14:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm}),{51:[1,178]},{36:[1,179]},{41:[1,180],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO},o($Vn,[2,34]),{4:181,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:19,23:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,37:21,38:22,39:23,46:24,47:25,48:26,49:27,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm},o($Vn,[2,48]),o($VX,[2,52],{7:4,8:5,9:6,10:7,11:8,12:9,15:12,22:19,23:20,37:21,38:22,39:23,46:24,47:25,48:26,49:27,6:44,13:$V0,14:$V1,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm}),{23:182,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc},o($Vn,[2,45]),{36:[1,183]},{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,14:$V1,15:12,16:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,22:19,23:20,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,34:$Vd,37:21,38:22,39:23,45:[1,184],46:24,47:25,48:26,49:27,50:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,61:$Vj,67:$Vk,68:$Vl,69:$Vm},{52:[1,185]},o($Vn,[2,33]),o($Vn,[2,47]),{36:[1,186]},o($Vn,[2,41])],
defaultActions: {43:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    const aritmetica = require('../Interprete/Expresiones/Operaciones/Aritmetica');
    const primitivo = require('../Interprete/Expresiones/Primitivo');

    const writeline = require('../Interprete/Instrucciones/WriteLine')
    const declaracion = require('../Interprete/Instrucciones/Declaracion')
    const ast = require('../Interprete/Ast/Ast')
    const tipo = require('../Interprete/TablaSimbolos/Tipo')
    const identificador = require('../Interprete/Expresiones/Identificador')
    const logica = require('../Interprete/Expresiones/Operaciones/Logica')
    const relacional=require('../Interprete/Expresiones/Operaciones/Relacional')
    const sentenciaIf= require('../Interprete/Instrucciones/Sentenciaif')
    const sentswitch= require('../Interprete/Instrucciones/Sentenciaswitch/Sentenciaswitch')
    const casos=require('../Interprete/Instrucciones/Sentenciaswitch/Casos')
    const detener= require('../Interprete/Instrucciones/SentBreak')
    const sentwhile=require('../Interprete/Instrucciones/Sentenciawhile')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignoramos los comentarios simples*/
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 'INCRE' 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 'DECRE' 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 5:console.log("Reconocio : " + yy_.yytext); return 91
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 55 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 56 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 'CORA' 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 'CORC' 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 27 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 25 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 33 
break;
case 15:console.log("Reconocio : " + yy_.yytext); return 65
break;
case 16:console.log("Reconocio : " + yy_.yytext); return 43
break;
case 17:console.log("Reconocio : " + yy_.yytext); return 45
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 70 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 73 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 71 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 32:console.log("Reconocio : " + yy_.yytext); return 'TERNARIO'
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 89 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 28 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 29 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 30 
break;
case 38: console.log("Reconocio : " + yy_.yytext);  return 31 
break;
case 39: console.log("Reconocio : " + yy_.yytext);  return 32 
break;
case 40: console.log("Reconocio : " + yy_.yytext);  return 69 
break;
case 41:console.log("Reconocio : " + yy_.yytext); return 42
break;
case 42:console.log("Reconocio : " + yy_.yytext); return 67
break;
case 43:console.log("Reconocio : " + yy_.yytext); return 59
break;
case 44:console.log("Reconocio : " + yy_.yytext); return 60
break;
case 45:console.log("Reconocio : " + yy_.yytext); return 'RSTART'
break;
case 46:console.log("Reconocio : " + yy_.yytext); return 'RWITH'
break;
case 47:console.log("Reconocio : " + yy_.yytext); return 61
break;
case 48:console.log("Reconocio : " + yy_.yytext); return 64
break;
case 49:console.log("Reconocio : " + yy_.yytext); return 66
break;
case 50:console.log("Reconocio : " + yy_.yytext); return 'RFOR'
break;
case 51:console.log("Reconocio : " + yy_.yytext); return 'RDO'
break;
case 52:console.log("Reconocio : " + yy_.yytext); return 'RCONTINUE'
break;
case 53:console.log("Reconocio : " + yy_.yytext); return 57
break;
case 54:console.log("Reconocio : " + yy_.yytext); return 58
break;
case 55:console.log("Reconocio : " + yy_.yytext); return 'RRETURN'
break;
case 56:console.log("Reconocio : " + yy_.yytext); return 'RTOLOWER'
break;
case 57:console.log("Reconocio : " + yy_.yytext); return 'RTOUPPER'
break;
case 58:console.log("Reconocio : " + yy_.yytext); return 'RTRUNCATE'
break;
case 59:console.log("Reconocio : " + yy_.yytext); return 'RROUND'
break;
case 60:console.log("Reconocio : " + yy_.yytext); return 'RTYPEOF'
break;
case 61:console.log("Reconocio : " + yy_.yytext); return 'RTOSTRING'
break;
case 62:console.log("Reconocio : " + yy_.yytext); return 'RTOCHARARRAY'
break;
case 63:console.log("Reconocio : " + yy_.yytext); return 'RFALSE'
break;
case 64:console.log("Reconocio : " + yy_.yytext); return 'RTRUE'
break;
case 65:console.log("Reconocio : " + yy_.yytext); return 68
break;
case 66:console.log("Reconocio : " + yy_.yytext); return 50
break;
case 67:console.log("Reconocio : " + yy_.yytext); return 54
break;
case 68:console.log("Reconocio : " + yy_.yytext); return 'RVOID'
break;
case 69:console.log("Reconocio : " + yy_.yytext); return 'RLENGTH'
break;
case 70: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 71: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 72: console.log("Reconocio : " + yy_.yytext);  return 34 
break;
case 73: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 74: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 75:/* Espacios se ignoran */
break;
case 76:return 5
break;
case 77:return 'ERROR'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:"")/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:writeline\b)/i,/^(?:new\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:return\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tocharArray\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:break\b)/i,/^(?:dynamiclist\b)/i,/^(?:append\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}