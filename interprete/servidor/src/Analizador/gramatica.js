/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,7],$V2=[1,8],$V3=[1,18],$V4=[1,20],$V5=[1,41],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,45],$Va=[1,38],$Vb=[1,39],$Vc=[1,40],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,37],$Vk=[1,32],$Vl=[1,31],$Vm=[1,36],$Vn=[5,8,13,14,24,26,37,38,39,40,41,43,50,53,58,60,62,65,67,68,69,70,71,72,73,76,78],$Vo=[1,51],$Vp=[1,71],$Vq=[1,85],$Vr=[1,68],$Vs=[1,88],$Vt=[1,67],$Vu=[1,66],$Vv=[1,69],$Vw=[1,70],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[8,45,49,54],$VK=[10,35,42],$VL=[1,123],$VM=[1,121],$VN=[1,114],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[1,118],$VS=[1,119],$VT=[1,120],$VU=[1,122],$VV=[1,124],$VW=[1,125],$VX=[1,126],$VY=[1,127],$VZ=[10,42,44,45,49,55,58,66,79,80,81,82,83,84,85,86,87,88,89,90],$V_=[1,150],$V$=[42,49,58],$V01=[10,42,49,55,58,66,89,90],$V11=[1,201],$V21=[10,42,44,45,49,55,58,66,79,80,85,86,87,88,89,90],$V31=[10,42,44,45,49,55,58,66,79,80,81,82,85,86,87,88,89,90],$V41=[10,42,44,45,49,55,58,66,79,80,81,82,83,85,86,87,88,89,90],$V51=[10,42,44,45,49,55,58,66,85,86,87,88,89,90],$V61=[42,49],$V71=[1,238],$V81=[1,239],$V91=[58,65,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"ID":8,"INCRE":9,"PYC":10,"DECRE":11,"asignaciones":12,"vectores":13,"listas":14,"sentenciaif":15,"sentenciaswitch":16,"sentenciawhile":17,"sentenciadowhile":18,"sentenciafor":19,"sentbreak":20,"sentcontinue":21,"sentreturn":22,"funciones":23,"metodos":24,"llamadas":25,"startwith":26,"writeline":27,"declalista":28,"lista_append":29,"set_lista":30,"decla_vector":31,"set_vector":32,"tipo":33,"lista_ids":34,"IGUAL":35,"exp":36,"INT":37,"DOUBLE":38,"STRING":39,"CHAR":40,"BOOLEAN":41,"COMA":42,"RDYNAMICLIST":43,"MENORQUE":44,"MAYORQUE":45,"RNEW":46,"RTOCHARARRAY":47,"PARA":48,"PARC":49,"RAPPEND":50,"get_lista":51,"RGETVALUE":52,"RSETVALUE":53,"CORA":54,"CORC":55,"LLAVEA":56,"lista_exp":57,"LLAVEC":58,"get_vector":59,"RIF":60,"RELSE":61,"RSWITCH":62,"casos":63,"caso":64,"RCASE":65,"RDOSPTS":66,"RDEFAULT":67,"RWHILE":68,"RBREAK":69,"RCONTINUE":70,"RRETURN":71,"WRITELINE":72,"RFOR":73,"declaracion_for":74,"contador_for":75,"RDO":76,"lista_params":77,"RVOID":78,"MAS":79,"MENOS":80,"MULTI":81,"DIV":82,"POT":83,"MOD":84,"MAYORIGUAL":85,"MENORIGUAL":86,"IGUALIGUAL":87,"DIFERENTE":88,"AND":89,"OR":90,"NOT":91,"DECIMAL":92,"ENTERO":93,"CADENA":94,"CARACTER":95,"TRUE":96,"FALSE":97,"DOBLECOMILLAS":98,"RTOLOWER":99,"RTOUPPER":100,"RLENGTH":101,"RTRUNCATE":102,"RROUND":103,"RTYPEOF":104,"RTOSTRING":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ID",9:"INCRE",10:"PYC",11:"DECRE",13:"vectores",14:"listas",24:"metodos",26:"startwith",35:"IGUAL",37:"INT",38:"DOUBLE",39:"STRING",40:"CHAR",41:"BOOLEAN",42:"COMA",43:"RDYNAMICLIST",44:"MENORQUE",45:"MAYORQUE",46:"RNEW",47:"RTOCHARARRAY",48:"PARA",49:"PARC",50:"RAPPEND",52:"RGETVALUE",53:"RSETVALUE",54:"CORA",55:"CORC",56:"LLAVEA",58:"LLAVEC",60:"RIF",61:"RELSE",62:"RSWITCH",65:"RCASE",66:"RDOSPTS",67:"RDEFAULT",68:"RWHILE",69:"RBREAK",70:"RCONTINUE",71:"RRETURN",72:"WRITELINE",73:"RFOR",76:"RDO",78:"RVOID",79:"MAS",80:"MENOS",81:"MULTI",82:"DIV",83:"POT",84:"MOD",85:"MAYORIGUAL",86:"MENORIGUAL",87:"IGUALIGUAL",88:"DIFERENTE",89:"AND",90:"OR",91:"NOT",92:"DECIMAL",93:"ENTERO",94:"CADENA",95:"CARACTER",96:"TRUE",97:"FALSE",98:"DOBLECOMILLAS",99:"RTOLOWER",100:"RTOUPPER",101:"RLENGTH",102:"RTRUNCATE",103:"RROUND",104:"RTYPEOF",105:"RTOSTRING"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,3],[6,3],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[33,1],[33,1],[33,1],[33,1],[33,1],[34,3],[34,1],[12,3],[28,12],[28,11],[29,7],[51,6],[30,9],[31,11],[31,9],[59,4],[32,7],[15,7],[15,11],[15,9],[16,7],[63,2],[63,1],[64,4],[64,3],[17,7],[20,2],[21,2],[22,3],[22,2],[27,5],[19,11],[74,4],[74,3],[75,2],[75,2],[75,3],[18,9],[23,8],[23,7],[23,8],[23,7],[77,4],[77,2],[25,4],[25,3],[57,3],[57,1],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,2],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,4],[36,2],[36,2],[36,1],[36,4],[36,4],[36,4],[36,4],[36,4],[36,4],[36,4],[36,4],[36,1],[36,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 51:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 36: case 52: case 77:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 21: case 22: case 23: case 24: case 25: case 26: case 27:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = new asignacion.default($$[$0-2],new aritmetica.default(new identificador.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),'+',new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line,_$[$0-2].first_column,false));
break;
case 6:
 this.$ = new asignacion.default($$[$0-2],new aritmetica.default(new identificador.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column),'-',new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line,_$[$0-2].first_column,false));
break;
case 7: case 20: case 94:
 this.$ = $$[$0-1]; 
break;
case 28:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1],(((_$[$0-3].first_line)-1)/2)+1,_$[$0-3].first_column); console.log("se leyo en la linea"); console.log((((_$[$0-3].first_line)-1)/2)+1);
break;
case 29:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], null,(((_$[$0-1].first_line)-1)/2)+1,_$[$0-1].first_column);
break;
case 30:
this.$ = new tipo.default("ENTERO"); 
break;
case 31:
this.$ = new tipo.default("DOBLE"); 
break;
case 32:
this.$ = new tipo.default("CADENA"); 
break;
case 33:
this.$ = new tipo.default("CARACTER"); 
break;
case 34:
this.$ = new tipo.default("BOOLEANO"); 
break;
case 35: case 76:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 37: case 63:
 this.$ = new asignacion.default($$[$0-2],$$[$0],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column);
break;
case 38:
 this.$= new declalista.default($$[$0-9],$$[$0-7],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 39:
this.$= new vector.default(3,$$[$0-8],$$[$0-6],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 40:
this.$ = new  apendlist.default($$[$0-4],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 41:
this.$= new  get_lista.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 42:
this.$ = new set_lista.default($$[$0-6],$$[$0-4],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 43:
this.$= new vector.default(1,$$[$0-10],$$[$0-9],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 44:
this.$= new vector.default(2,$$[$0-8],$$[$0-7],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 45:
this.$ = new access_vector.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 46:
this.$ = new set_vector.default($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 47:
 this.$ = new sentenciaIf.default($$[$0-4], $$[$0-1], [], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 48:
 this.$ = new sentenciaIf.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 49:
 this.$ = new sentenciaIf.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 50:
 this.$ = new sentswitch.default($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 53:
this.$ = new casos.default($$[$0-2],$$[$0],false,(((_$[$0-2].first_line)-1)/2)+1,_$[$0-2].first_column);
break;
case 54:
this.$ = new casos.default($$[$0-2],$$[$0],true,(((_$[$0-1].first_line)-1)/2)+1,_$[$0-1].first_column);
break;
case 55:
this.$ = new sentwhile.default($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 56:
this.$ = new detener.default();
break;
case 57:
 this.$ = new continuar.default();
break;
case 58:
this.$= new sreturn.default($$[$0-1]); 
break;
case 59:
this.$= new sreturn.default(null); 
break;
case 60:
 this.$ = new writeline.default($$[$0-2],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column);  console.log("AAAAAAAAAAA writeline en linea: "+((_$[$0-2].first_line)/2)+" y columna: "+_$[$0-2].first_column);
break;
case 61:
 this.$ = new sentfor.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 62:
 this.$ = new declaracion.default($$[$0-3], $$[$0-2], $$[$0],(((_$[$0-2].first_line)-1)/2)+1,_$[$0-2].first_column); 
break;
case 64: case 104:
this.$ = new asignacion.default($$[$0-1],new aritmetica.default(new identificador.default($$[$0-1],((_$[$0-1].first_line-1)/2)+1,_$[$0-1].first_column),'+',new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column,false));
break;
case 65: case 105:
this.$ = new asignacion.default($$[$0-1],new aritmetica.default(new identificador.default($$[$0-1],((_$[$0-1].first_line-1)/2)+1,_$[$0-1].first_column),'-',new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line,_$[$0-1].first_column,false));
break;
case 66:
this.$ = new asignacion.default($$[$0-2],$$[$0],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column);
break;
case 67:
this.$ = new sentwhile.default($$[$0-2],$$[$0-6],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 68:
 this.$ = new func.default(2, $$[$0-7], $$[$0-6],$$[$0-4],false, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 69:
 this.$ = new func.default(2, $$[$0-6], $$[$0-5],[],false, $$[$0-1],  _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 70:
this.$ = new func.default(3, $$[$0-7], $$[$0-6],$$[$0-4],true, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 71:
this.$ = new func.default(3, $$[$0-6], $$[$0-5],[],true, $$[$0-1],  _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 72:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 73:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 74:
this.$ = new llamads.default($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 75:
this.$ = new llamads.default($$[$0-2], [] ,_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 78:
 this.$ = new aritmetica.default($$[$0-2], '+',$$[$0],((_$[$0-2].first_line-1)/2)+1,_$[$0-2].first_column,false); console.log("expresion E+E en la linea: "+ _$[$0-2].first_line+" y lascolumn: "+_$[$0-2].last_column);
break;
case 79:
 this.$ = new aritmetica.default($$[$0-2], '-',$$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 80:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 81:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 82:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 83:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 84:
 this.$ = new relacional.default($$[$0-2], '>=',$$[$0],((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 85:
 this.$ = new relacional.default($$[$0-2], '>',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 86:
 this.$ = new relacional.default($$[$0-2], '<=',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 87:
 this.$ = new relacional.default($$[$0-2], '<',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 88:
 this.$ = new relacional.default($$[$0-2], '==',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 89:
 this.$ = new relacional.default($$[$0-2], '!=',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 90:
 this.$ = new logica.default($$[$0-2], '&&',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 91:
 this.$ = new logica.default($$[$0-2], '||',$$[$0], ((_$[$0-2].first_line-1)/2)+1, _$[$0-2].first_column,false); 
break;
case 92:
 this.$ = new logica.default($$[$0], '!',null, ((_$[$0-1].first_line-1)/2)+1,$$[$0-1].first_column,true); 
break;
case 93:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', null, ((_$[$0-1].first_line-1)/2)+1, _$[$0-1].first_column,true); 
break;
case 95:
 this.$ = new primitivo.default(Number($$[$0]), 'DOBLE', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 96:
 this.$ = new primitivo.default(Number($$[$0]), 'ENTERO', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 97:
 this.$ = new identificador.default($$[$0], ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 98:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CADENA', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 99:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CARACTER', _$[$0].first_line, _$[$0].first_column); 
break;
case 100:
 this.$ = new primitivo.default(true, 'BOOLEANO', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 101:
 this.$ = new primitivo.default(false, 'BOOLEANO', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 102:
 $$[$0] = ""; this.$ = new primitivo.default($$[$0], 'CADENA', ((_$[$0].first_line-1)/2)+1, _$[$0].first_column); 
break;
case 103:
this.$ = new casteo.default($$[$0-2],$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 106:
this.$=$$[$0];
break;
case 107:
this.$ = new nativas.default("tolower",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 108:
this.$ = new nativas.default("toupper",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 109:
this.$ = new nativas.default("length",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 110:
this.$ = new nativas.default("truncate",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 111:
this.$ = new nativas.default("round",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 112:
this.$ = new nativas.default("typeof",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 113:
this.$ = new nativas.default("tostring",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 114:
this.$ = new nativas.default("tochararray",$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 115:
 this.$= $$[$0]; 
break;
case 116:
 this.$=$$[$0];   
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{1:[3]},{5:[1,46],6:47,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),{9:[1,48],11:[1,49],35:[1,50],48:$Vo,54:[1,52]},{10:[1,53]},o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),{10:[1,54]},o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),o($Vn,[2,26]),o($Vn,[2,27]),{8:[1,56],34:55},{48:[1,57]},{48:[1,58]},{48:[1,59]},{56:[1,60]},{48:[1,61]},{10:[1,62]},{10:[1,63]},{8:$Vp,10:[1,65],25:77,36:64,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:[1,89]},{48:[1,90]},{44:[1,91]},{48:[1,92]},{48:[1,93]},o($VJ,[2,30]),o($VJ,[2,31]),o($VJ,[2,32]),o($VJ,[2,33]),o($VJ,[2,34]),{1:[2,1]},o($Vn,[2,2]),{10:[1,94]},{10:[1,95]},{8:$Vp,25:77,36:96,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:99,47:$Vq,48:$Vr,49:[1,98],51:86,52:$Vs,57:97,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:100,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},o($Vn,[2,7]),o($Vn,[2,20]),{10:[1,102],35:[1,101],42:[1,103]},o($VK,[2,36],{48:[1,104],54:[1,105]}),{8:$Vp,25:77,36:106,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:107,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:108,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{4:109,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{8:[1,112],33:111,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,74:110},o($Vn,[2,56]),o($Vn,[2,57]),{10:[1,113],44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},o($Vn,[2,59]),{8:$Vp,25:77,36:128,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:129,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,33:131,36:130,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},o($VZ,[2,95]),o($VZ,[2,96]),o($VZ,[2,97],{9:[1,132],11:[1,133],48:$Vo,54:[1,134]}),o($VZ,[2,98]),o($VZ,[2,99]),o($VZ,[2,100]),o($VZ,[2,101]),o($VZ,[2,102]),o($VZ,[2,106]),{48:[1,135]},{48:[1,136]},{48:[1,137]},{48:[1,138]},{48:[1,139]},{48:[1,140]},{48:[1,141]},{48:[1,142]},o($VZ,[2,115]),o($VZ,[2,116]),{48:[1,143]},{48:[1,144]},{8:$Vp,25:77,36:145,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{33:146,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9},{8:[1,147]},{8:[1,148]},o($Vn,[2,5]),o($Vn,[2,6]),{10:[2,37],44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{42:$V_,49:[1,149]},o($VZ,[2,75]),o($V$,[2,77],{44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY}),{44:$VL,45:$VM,55:[1,151],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{8:$Vp,25:77,36:152,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},o($Vn,[2,29]),{8:[1,153]},{33:156,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,49:[1,155],77:154},{55:[1,157]},{44:$VL,45:$VM,49:[1,158],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,159],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,160],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{6:47,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,58:[1,161],60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{10:[1,162]},{8:[1,163]},{35:[1,164]},o($Vn,[2,58]),{8:$Vp,25:77,36:165,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:166,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:167,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:168,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:169,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:170,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:171,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:172,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:173,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:174,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:175,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:176,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:177,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:178,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},o($V01,[2,92],{44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW}),o($VZ,[2,93]),{44:$VL,45:$VM,49:[1,179],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{49:[1,180]},o($VZ,[2,104]),o($VZ,[2,105]),{8:$Vp,25:77,36:181,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:182,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:183,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:184,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:185,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:186,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:187,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:188,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:189,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:[1,190]},{33:156,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,49:[1,192],77:191},{44:$VL,45:$VM,49:[1,193],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{45:[1,194]},{42:[1,195]},{42:[1,196]},o($VZ,[2,74]),{8:$Vp,25:77,36:197,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{35:[1,198]},{10:[1,199],44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},o($VK,[2,35]),{42:$V11,49:[1,200]},{56:[1,202]},{8:[1,203]},{35:[1,204]},{56:[1,205]},{56:[1,206]},{56:[1,207]},{68:[1,208]},{8:$Vp,25:77,36:209,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{35:[1,210]},{8:$Vp,25:77,36:211,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},o($V21,[2,78],{81:$VP,82:$VQ,83:$VR,84:$VS}),o($V21,[2,79],{81:$VP,82:$VQ,83:$VR,84:$VS}),o($V31,[2,80],{83:$VR,84:$VS}),o($V31,[2,81],{83:$VR,84:$VS}),o($V41,[2,82],{84:$VS}),o($V41,[2,83],{84:$VS}),o($V51,[2,84],{79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS}),o($V51,[2,85],{79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS}),o($V51,[2,86],{79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS}),o($V51,[2,87],{79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS}),o($V51,[2,88],{79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS}),o($V51,[2,89],{79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS}),o($V01,[2,90],{44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW}),o([10,42,49,55,58,66,90],[2,91],{44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX}),o($VZ,[2,94]),{8:$Vp,25:77,36:212,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{44:$VL,45:$VM,55:[1,213],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,214],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,215],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,216],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,217],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,218],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,219],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,220],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,221],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{42:[1,222]},{42:$V11,49:[1,223]},{56:[1,224]},{10:[1,225]},{8:[1,226]},{8:$Vp,25:77,36:227,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:$Vp,25:77,36:228,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},o($V$,[2,76],{44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY}),{8:$Vp,25:77,36:229,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},o($Vn,[2,28]),{56:[1,230]},{33:231,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9},{4:232,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},o($V61,[2,73]),{46:[1,233],56:[1,234]},{4:235,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{63:236,64:237,65:$V71,67:$V81},{4:240,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{48:[1,241]},{10:[1,242],44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{8:$Vp,25:77,36:243,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{10:[2,63],44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},o($VZ,[2,103]),o($VZ,[2,45]),o($VZ,[2,107]),o($VZ,[2,108]),o($VZ,[2,109]),o($VZ,[2,110]),o($VZ,[2,111]),o($VZ,[2,112]),o($VZ,[2,113]),o($VZ,[2,114]),{8:$Vp,25:77,36:244,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{56:[1,245]},{4:246,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},o($Vn,[2,60]),{35:[1,247]},{44:$VL,45:$VM,49:[1,248],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{42:[1,249],44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{10:[1,250],44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{4:251,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{8:[1,252]},{6:47,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,58:[1,253],60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{33:254,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9},{8:$Vp,25:77,36:99,47:$Vq,48:$Vr,51:86,52:$Vs,57:255,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{6:47,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,58:[1,256],60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{58:[1,257],64:258,65:$V71,67:$V81},o($V91,[2,52]),{8:$Vp,25:77,36:259,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{66:[1,260]},{6:47,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,58:[1,261],60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{8:$Vp,25:77,36:262,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{8:[1,264],75:263},{10:[2,62],44:$VL,45:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{44:$VL,45:$VM,49:[1,265],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{4:266,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{6:47,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,58:[1,267],60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{46:[1,268],47:[1,269]},{10:[1,270]},{8:$Vp,25:77,36:271,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},o($Vn,[2,46]),{6:47,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,58:[1,272],60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},o($V61,[2,72]),o($Vn,[2,69]),{54:[1,273]},{42:$V_,58:[1,274]},o($Vn,[2,47],{61:[1,275]}),o($Vn,[2,50]),o($V91,[2,51]),{44:$VL,45:$VM,66:[1,276],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{4:277,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},o($Vn,[2,55]),{44:$VL,45:$VM,49:[1,278],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{49:[1,279]},{9:[1,280],11:[1,281],35:[1,282]},o($VZ,[2,41]),{6:47,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,58:[1,283],60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},o($Vn,[2,71]),{43:[1,284]},{48:[1,285]},o($Vn,[2,40]),{44:$VL,45:$VM,49:[1,286],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},o($Vn,[2,68]),{8:$Vp,25:77,36:287,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{10:[1,288]},{15:290,56:[1,289],60:$Vd},{4:291,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},o($V91,[2,54],{7:4,12:6,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,25:19,27:21,28:22,29:23,30:24,31:25,32:26,33:27,6:47,8:$V0,13:$V1,14:$V2,24:$V3,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm}),{10:[1,292]},{56:[1,293]},{49:[2,64]},{49:[2,65]},{8:$Vp,25:77,36:294,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},o($Vn,[2,70]),{44:[1,295]},{8:$Vp,25:77,36:296,47:$Vq,48:$Vr,51:86,52:$Vs,59:87,80:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF,103:$VG,104:$VH,105:$VI},{10:[1,297]},{44:$VL,45:$VM,55:[1,298],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},o($Vn,[2,44]),{4:299,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},o($Vn,[2,49]),o($V91,[2,53],{7:4,12:6,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,25:19,27:21,28:22,29:23,30:24,31:25,32:26,33:27,6:47,8:$V0,13:$V1,14:$V2,24:$V3,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm}),o($Vn,[2,67]),{4:300,6:3,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{44:$VL,45:$VM,49:[2,66],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},{33:301,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9},{44:$VL,45:$VM,49:[1,302],79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW,89:$VX,90:$VY},o($Vn,[2,42]),{10:[1,303]},{6:47,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,58:[1,304],60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{6:47,7:4,8:$V0,12:6,13:$V1,14:$V2,15:9,16:10,17:11,18:12,19:13,20:14,21:15,22:16,23:17,24:$V3,25:19,26:$V4,27:21,28:22,29:23,30:24,31:25,32:26,33:27,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,43:$Va,50:$Vb,53:$Vc,58:[1,305],60:$Vd,62:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,76:$Vl,78:$Vm},{45:[1,306]},{10:[1,307]},o($Vn,[2,43]),o($Vn,[2,48]),o($Vn,[2,61]),{10:[1,308]},o($Vn,[2,39]),o($Vn,[2,38])],
defaultActions: {46:[2,1],280:[2,64],281:[2,65]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    const aritmetica = require('../Interprete/Expresiones/Operaciones/Aritmetica');
    const primitivo = require('../Interprete/Expresiones/Primitivo');

    const writeline = require('../Interprete/Instrucciones/WriteLine')
    const declaracion = require('../Interprete/Instrucciones/Declaracion')
    const ast = require('../Interprete/Ast/Ast')
    const tipo = require('../Interprete/TablaSimbolos/Tipo')
    const identificador = require('../Interprete/Expresiones/Identificador')
    const logica = require('../Interprete/Expresiones/Operaciones/Logica')
    const relacional=require('../Interprete/Expresiones/Operaciones/Relacional')
    const sentenciaIf= require('../Interprete/Instrucciones/Sentenciaif')
    const sentswitch= require('../Interprete/Instrucciones/Sentenciaswitch/Sentenciaswitch')
    const casos=require('../Interprete/Instrucciones/Sentenciaswitch/Casos')
    const detener= require('../Interprete/Instrucciones/SentBreak')
    const sentwhile=require('../Interprete/Instrucciones/Sentenciawhile')
    const incre_decre= require('../Interprete/Expresiones/Operaciones/incre_decremento')
    const asignacion= require('../Interprete/Instrucciones/Asignacion')
    const sentfor = require('../Interprete/Instrucciones/Sentenciafor')
    const llamads=require('../Interprete/Instrucciones/Llamadas')
    const param= require('../Interprete/Instrucciones/parametro')
    const func= require('../Interprete/Instrucciones/funciones')
    const sreturn= require('../Interprete/Instrucciones/sent_transfer/Sent_return')
    const simbolo = require('../Interprete/TablaSimbolos/Simbolos')
    const continuar=require('../Interprete/Instrucciones/sent_transfer/Sentcontinue')
    const casteo=require('../Interprete/Expresiones/Casteo')
    const nativas=require('../Interprete/Expresiones/Nativas/Nativas')
    const vector= require('../Interprete/Instrucciones/Decla_Vector')
    const access_vector=require('../Interprete/Expresiones/Accesovector')
    const get_lista= require('../Interprete/Expresiones/Get_lis')
    const set_vector = require('../Interprete/Instrucciones/Set_vector')
    const declalista = require('../Interprete/Instrucciones/Decla_lista')
    const apendlist =  require('../Interprete/Instrucciones/Append_list')
    const set_lista = require('../Interprete/Instrucciones/Set_list')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignoramos los comentarios simples*/
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : " + yy_.yytext);  return 9 
break;
case 3: console.log("Reconocio : " + yy_.yytext);  return 11 
break;
case 4: console.log("Reconocio : " + yy_.yytext);  return 87 
break;
case 5:console.log("Reconocio : " + yy_.yytext); return 98
break;
case 6: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 7: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 8: console.log("Reconocio : " + yy_.yytext);  return 48 
break;
case 9: console.log("Reconocio : " + yy_.yytext);  return 49 
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 54 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 55 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 10 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 35 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 42 
break;
case 15:console.log("Reconocio : " + yy_.yytext); return 66
break;
case 16:console.log("Reconocio : " + yy_.yytext); return 56
break;
case 17:console.log("Reconocio : " + yy_.yytext); return 58
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 25: console.log("Reconocio : " + yy_.yytext);  return 45 
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 44 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 88 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 89 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 90 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 32:console.log("Reconocio : " + yy_.yytext); return 'TERNARIO'
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 96 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 97 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 37 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 38 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 39 
break;
case 38: console.log("Reconocio : " + yy_.yytext);  return 40 
break;
case 39: console.log("Reconocio : " + yy_.yytext);  return 41 
break;
case 40: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 41:console.log("Reconocio : " + yy_.yytext); return 46
break;
case 42:console.log("Reconocio : " + yy_.yytext); return 68
break;
case 43:console.log("Reconocio : " + yy_.yytext); return 60
break;
case 44:console.log("Reconocio : " + yy_.yytext); return 61
break;
case 45:console.log("Reconocio : " + yy_.yytext); return 'RSTART'
break;
case 46:console.log("Reconocio : " + yy_.yytext); return 'RWITH'
break;
case 47:console.log("Reconocio : " + yy_.yytext); return 62
break;
case 48:console.log("Reconocio : " + yy_.yytext); return 65
break;
case 49:console.log("Reconocio : " + yy_.yytext); return 67
break;
case 50:console.log("Reconocio : " + yy_.yytext); return 73
break;
case 51:console.log("Reconocio : " + yy_.yytext); return 76
break;
case 52:console.log("Reconocio : " + yy_.yytext); return 70
break;
case 53:console.log("Reconocio : " + yy_.yytext); return 52
break;
case 54:console.log("Reconocio : " + yy_.yytext); return 53
break;
case 55:console.log("Reconocio : " + yy_.yytext); return 71
break;
case 56:console.log("Reconocio : " + yy_.yytext); return 99
break;
case 57:console.log("Reconocio : " + yy_.yytext); return 100
break;
case 58:console.log("Reconocio : " + yy_.yytext); return 102
break;
case 59:console.log("Reconocio : " + yy_.yytext); return 103
break;
case 60:console.log("Reconocio : " + yy_.yytext); return 104
break;
case 61:console.log("Reconocio : " + yy_.yytext); return 105
break;
case 62:console.log("Reconocio : " + yy_.yytext); return 47
break;
case 63:console.log("Reconocio : " + yy_.yytext); return 'RFALSE'
break;
case 64:console.log("Reconocio : " + yy_.yytext); return 'RTRUE'
break;
case 65:console.log("Reconocio : " + yy_.yytext); return 69
break;
case 66:console.log("Reconocio : " + yy_.yytext); return 43
break;
case 67:console.log("Reconocio : " + yy_.yytext); return 50
break;
case 68:console.log("Reconocio : " + yy_.yytext); return 78
break;
case 69:console.log("Reconocio : " + yy_.yytext); return 101
break;
case 70: console.log("Reconocio : " + yy_.yytext);  return 92 
break;
case 71: console.log("Reconocio : " + yy_.yytext);  return 93 
break;
case 72: console.log("Reconocio : " + yy_.yytext);  return 8 
break;
case 73: console.log("Reconocio : " + yy_.yytext);  return 94 
break;
case 74: console.log("Reconocio : " + yy_.yytext);  return 95 
break;
case 75:/* Espacios se ignoran */
break;
case 76:return 5
break;
case 77:return 'ERROR'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:==)/i,/^(?:"")/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:writeline\b)/i,/^(?:new\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:start\b)/i,/^(?:with\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:getValue\b)/i,/^(?:setValue\b)/i,/^(?:return\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tocharArray\b)/i,/^(?:false\b)/i,/^(?:true\b)/i,/^(?:break\b)/i,/^(?:dynamiclist\b)/i,/^(?:append\b)/i,/^(?:void\b)/i,/^(?:length\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}